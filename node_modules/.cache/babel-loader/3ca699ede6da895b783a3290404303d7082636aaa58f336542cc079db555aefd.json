{"ast":null,"code":"let NUMBER_OF_PEGS=20;const PEG_RADIUS=10;/**\n * This method will generate level 1\n */const LevelOne=()=>{let redPegCount=0;let bluePegCount=0;const rows=5;const cols=5;const spacing=50;const startX=100;const startY=170;let pegs=[];for(let row=0;row<rows;row++){for(let col=0;col<cols;col++){let pegType=\"blue\";// Ensure red pegs don't exceed blue pegs\nif(Math.random()<0.3&&redPegCount<bluePegCount/2){pegType=\"red\";redPegCount++;}bluePegCount++;// Increment blue peg count regardless\npegs.push({x:startX+col*spacing,y:startY+row*spacing,radius:typeof PEG_RADIUS!==\"undefined\"?PEG_RADIUS:10,// Default radius if undefined\nhit:false,type:pegType});}}return pegs;};/**\n * This method will generate level 2\n */const LevelTwo=()=>{let pegs=[];let redPegCount=0;let bluePegCount=0;const totalPegs=NUMBER_OF_PEGS;for(let i=0;i<totalPegs;i++){let pegType=\"blue\";// Ensure red pegs don't exceed blue pegs\nif(Math.random()<0.3&&redPegCount<bluePegCount){pegType=\"red\";redPegCount++;}else{bluePegCount++;}pegs.push({x:Math.random()*380+10,y:Math.random()*300+100,radius:PEG_RADIUS,hit:false,type:pegType});};return pegs;};/**\n * This method will generate level 3\n */const LevelThree=()=>{let pegs=[];let redPegCount=0;let bluePegCount=0;const totalPegs=NUMBER_OF_PEGS;for(let i=0;i<totalPegs;i++){let pegType=\"blue\";// Ensure red pegs don't exceed blue pegs\nif(Math.random()<0.3&&redPegCount<bluePegCount){pegType=\"red\";redPegCount++;}else{bluePegCount++;}pegs.push({x:Math.random()*380+10,y:Math.random()*300+100,radius:PEG_RADIUS,hit:false,type:pegType});};return pegs;};export{LevelOne,LevelTwo,LevelThree};","map":{"version":3,"names":["NUMBER_OF_PEGS","PEG_RADIUS","LevelOne","redPegCount","bluePegCount","rows","cols","spacing","startX","startY","pegs","row","col","pegType","Math","random","push","x","y","radius","hit","type","LevelTwo","totalPegs","i","LevelThree"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/Levels.js"],"sourcesContent":["let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n\n/**\n * This method will generate level 1\n */\nconst LevelOne = () => {\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    \n    const rows = 5;\n    const cols = 5;\n    const spacing = 50;\n    const startX = 100;\n    const startY = 170;\n\n    let pegs = [];\n\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            let pegType = \"blue\";\n\n            // Ensure red pegs don't exceed blue pegs\n            if (Math.random() < 0.3 && redPegCount < (bluePegCount / 2)) {\n                pegType = \"red\";\n                redPegCount++;\n            }\n            bluePegCount++; // Increment blue peg count regardless\n\n            pegs.push({\n                x: startX + col * spacing,\n                y: startY + row * spacing,\n                radius: typeof PEG_RADIUS !== \"undefined\" ? PEG_RADIUS : 10, // Default radius if undefined\n                hit: false,\n                type: pegType\n            });\n        }\n    }\n\n    return pegs;\n};\n\n\n/**\n * This method will generate level 2\n */\nconst LevelTwo = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n\n/**\n * This method will generate level 3\n */\nconst LevelThree = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n\n\nexport { \n    LevelOne,\n    LevelTwo,\n    LevelThree\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelOne = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const totalPegs = NUMBER_OF_PEGS;\n  for (let i = 0; i < totalPegs; i++) {\n    let pegType = \"blue\";\n\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    pegs.push({\n      x: Math.random() * 380 + 10,\n      y: Math.random() * 300 + 100,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  ;\n  return pegs;\n};\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\n_c = LevelOne;\nconst LevelTwo = () => Array.from({\n  length: NUMBER_OF_PEGS\n}, () => ({\n  x: Math.random() * 380 + 10,\n  y: Math.random() * 300 + 100,\n  radius: PEG_RADIUS,\n  hit: false\n}));\n\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\n_c2 = LevelTwo;\nconst LevelThree = () => Array.from({\n  length: NUMBER_OF_PEGS\n}, () => ({\n  x: Math.random() * 380 + 10,\n  y: Math.random() * 300 + 100,\n  radius: PEG_RADIUS,\n  hit: false\n}));\n_c3 = LevelThree;\nexport { LevelOne, LevelTwo, LevelThree };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LevelOne\");\n$RefreshReg$(_c2, \"LevelTwo\");\n$RefreshReg$(_c3, \"LevelThree\");","map":{"version":3,"names":["NUMBER_OF_PEGS","PEG_RADIUS","LevelOne","pegs","redPegCount","bluePegCount","totalPegs","i","pegType","Math","random","push","x","y","radius","hit","type","_c","LevelTwo","Array","from","length","_c2","LevelThree","_c3","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/Levels.js"],"sourcesContent":["let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelOne = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelTwo = () => (\n    Array.from({ length: NUMBER_OF_PEGS }, () => ({\n        x: (Math.random() * 380) + 10,\n        y: (Math.random() * 300) + 100,\n        radius: PEG_RADIUS,\n        hit: false\n    }))\n);\n\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelThree = () => (\n    Array.from({ length: NUMBER_OF_PEGS }, () => ({\n        x: (Math.random() * 380) + 10,\n        y: (Math.random() * 300) + 100,\n        radius: PEG_RADIUS,\n        hit: false\n    }))\n);\n\n\nexport { \n    LevelOne,\n    LevelTwo,\n    LevelThree\n};"],"mappings":"AAAA,IAAIA,cAAc,GAAG,EAAE;AACvB,MAAMC,UAAU,GAAG,EAAE;AACrB;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACnB,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,YAAY,GAAG,CAAC;EACpB,MAAMC,SAAS,GAAGN,cAAc;EAEhC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,EAAEC,CAAC,EAAE,EAAE;IAChC,IAAIC,OAAO,GAAG,MAAM;;IAEpB;IACA,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIN,WAAW,GAAGC,YAAY,EAAE;MACnDG,OAAO,GAAG,KAAK;MACfJ,WAAW,EAAE;IACjB,CAAC,MAAM;MACHC,YAAY,EAAE;IAClB;IAEAF,IAAI,CAACQ,IAAI,CAAC;MACNC,CAAC,EAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,EAAE;MAC7BG,CAAC,EAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,GAAG;MAC9BI,MAAM,EAAEb,UAAU;MAClBc,GAAG,EAAE,KAAK;MACVC,IAAI,EAAER;IACV,CAAC,CAAC;EACN;EAAC;EAED,OAAOL,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AAHAc,EAAA,GA5BMf,QAAQ;AAgCd,MAAMgB,QAAQ,GAAGA,CAAA,KACbC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAErB;AAAe,CAAC,EAAE,OAAO;EAC1CY,CAAC,EAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,EAAE;EAC7BG,CAAC,EAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,GAAG;EAC9BI,MAAM,EAAEb,UAAU;EAClBc,GAAG,EAAE;AACT,CAAC,CAAC,CACL;;AAED;AACA;AACA;AACA;AAHAO,GAAA,GATMJ,QAAQ;AAad,MAAMK,UAAU,GAAGA,CAAA,KACfJ,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAErB;AAAe,CAAC,EAAE,OAAO;EAC1CY,CAAC,EAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,EAAE;EAC7BG,CAAC,EAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAI,GAAG;EAC9BI,MAAM,EAAEb,UAAU;EAClBc,GAAG,EAAE;AACT,CAAC,CAAC,CACL;AAACS,GAAA,GAPID,UAAU;AAUhB,SACIrB,QAAQ,EACRgB,QAAQ,EACRK,UAAU;AACZ,IAAAN,EAAA,EAAAK,GAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
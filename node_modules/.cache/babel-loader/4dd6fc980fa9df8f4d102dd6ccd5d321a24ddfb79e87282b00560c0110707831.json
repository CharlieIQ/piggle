{"ast":null,"code":"/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */import{useEffect,useRef,useState}from\"react\";import*as pegUtils from\"./levels/RandomLevels.js\";import*as adventureLevels from\"./levels/AdventureLevels.js\";// Import cannon sprite\nimport PigCannon from\"./GameImages/PigCannon.png\";import piggleBall from\"./GameImages/piggleBall.png\";// Import game sounds\nimport pegHitSound from\"./Sounds/pegHitSound.wav\";/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";export default function PiggleGame(){// Reference to canvas element\nconst canvasRef=useRef(null);/* Canvas size constants */const CANVAS_HEIGHT=500;const CANVAS_WIDTH=400;/* Constants for game mechanics */const BALL_GRAVITY=0.025;const MAX_SHOTS=10;/* Constants for game sprites */const cannonImage=useRef(new Image());const piggleImage=useRef(new Image());// For audio\n// API call to handle peg sound     \nconst playPegHitSound=pitch=>{const audioContext=new(window.AudioContext||window.webkitAudioContext)();const source=audioContext.createBufferSource();fetch(pegHitSound).then(response=>response.arrayBuffer()).then(data=>audioContext.decodeAudioData(data)).then(buffer=>{source.buffer=buffer;source.playbackRate.value=pitch;source.connect(audioContext.destination);source.start(0);});};// Ball state variables\nconst ballRef=useRef({x:200,y:50,dx:0,dy:0,radius:9,launched:false});// State for cannon angle\nconst[cannonAngle,setCannonAngle]=useState(0);// State for remaining shots\nconst[shotsLeft,setShotsLeft]=useState(MAX_SHOTS);// Current score variable\n// (PROPOSED SCORE EQUATION) currentScore + (numberOfPegsHitThisShot * 100)\nconst[currentScore,setCurrentScore]=useState(0);const[pegsHitThisShot,setPegsHitThisShot]=useState(0);// State for game win or lose\nconst[gameMessage,setGameMessage]=useState(\"\");// State for game finished (0 for no, 1 for yes)\nconst[isGameDone,setIsGameDone]=useState(0);// State for if game is adventure mode (0 for no, 1 for yes)\nconst[isAdventureMode,setIsAdventureMode]=useState(0);const[currentAdventureModeLevel,setCurrentAdventureModeLevel]=useState(1);// Peg generation logic inside useEffect\nconst pegs=useRef([]);/**\n    * This will update the score for every peg hit\n    */useEffect(()=>{if(pegsHitThisShot>0){// Correctly update score based on latest pegsHitThisShot\nsetCurrentScore(prevScore=>prevScore+pegsHitThisShot*100);// Play peg sounds\nplayPegHitSound(0.9+pegsHitThisShot*0.1);// Reset after score updates\nsetPegsHitThisShot(prev=>prev++);}},[pegsHitThisShot]);useEffect(()=>{// Randomize the pegs every time\nconst pegGeneration=Math.floor(Math.random()*5);// Correct random generation\nlet pegGenShape;// Generate the pegs based on the result of the random variable\nswitch(pegGeneration){case 0:pegGenShape=pegUtils.generatePegsRandomly();break;case 1:pegGenShape=pegUtils.generatePegsCircular();break;case 2:pegGenShape=pegUtils.generatePegsHexagonal();break;case 3:pegGenShape=pegUtils.generatePegsTriangular();break;case 4:pegGenShape=pegUtils.generatePegsGrid();break;default:pegGenShape=pegUtils.generatePegsRandomly();}// Set pegs after generation\npegs.current=pegGenShape;},[]);// Game loop\nuseEffect(()=>{const canvas=canvasRef.current;const ctx=canvas.getContext(\"2d\");let animationFrameId;// To load the images for sprites\ncannonImage.current.src=PigCannon;piggleImage.current.src=piggleBall;/**\n         * Method to generate the cannon\n         */const drawCannon=()=>{ctx.save();// Move pivot point to the cannon base\nctx.translate(200,50);// Offset the cannon angle by pi/2 to align barrel with mouse position\nctx.rotate(cannonAngle-Math.PI/2);// Cannon default size\nconst cannonWidth=80;const cannonHeight=80;// Generate cannon with position and size\nctx.drawImage(cannonImage.current,-(cannonWidth/2),-(cannonHeight/3),cannonWidth,cannonHeight);ctx.restore();};/**\n        * Method to generate the current ball\n        */const drawBall=()=>{var ballSize=2.5;// Draw the pig sprite\nif(ballRef.current.launched){ctx.drawImage(// The image reference\npiggleImage.current,// x position of the ball\nballRef.current.x-ballRef.current.radius,// y position of the ball\nballRef.current.y-ballRef.current.radius,ballRef.current.radius*ballSize,ballRef.current.radius*ballSize);}};/**\n         * Method to generate the pegs\n         */const drawPegs=()=>{if(pegs.current.length>0){pegs.current.forEach(peg=>{if(!peg.hit){ctx.beginPath();// Draw peg\nctx.arc(peg.x,peg.y,peg.radius,0,Math.PI*2);// Fill color based on peg type\nctx.fillStyle=peg.type===\"red\"?\"red\":\"blue\";ctx.fill();// Draw peg border\nctx.lineWidth=1.5;ctx.strokeStyle=\"black\";ctx.stroke();ctx.closePath();}});}};/**\n         * Logic to handle peg collisions\n         */const handleCollisions=()=>{let hitCount=0;// Checks each peg if it was hit\npegs.current.forEach(peg=>{// Ignore if peg is hit\nif(peg.hit)return;const dx=ballRef.current.x-peg.x;const dy=ballRef.current.y-peg.y;const distance=Math.sqrt(dx*dx+dy*dy);// Calculate if peg was hit\nif(distance<ballRef.current.radius+peg.radius){// Get the direction of the collision by dividing with the distance\nconst normalX=dx/distance;const normalY=dy/distance;// Get the ball speed value by taking the dot product\nconst dotProduct=ballRef.current.dx*normalX+ballRef.current.dy*normalY;ballRef.current.dx-=2*dotProduct*normalX;ballRef.current.dy-=2*dotProduct*normalY;// Mark the peg as hit\npeg.hit=true;// Update hit count\nhitCount++;}});setPegsHitThisShot(prev=>prev+hitCount);};/**\n         * Update the ball position\n         */const updateBall=()=>{let ball=ballRef.current;// For ball launch logic\nif(ball.launched){ball.dy+=BALL_GRAVITY;ball.x+=ball.dx;ball.y+=ball.dy;// For ball hitting walls (flip x speed)\nif(ball.x-ball.radius<0||ball.x+ball.radius>canvas.width){ball.dx*=-1;}// For ball hitting ceiling (flip y speed)\nif(ball.y+ball.radius<0){ball.dy*=-1;}// If ball goes out of bounds on the bottom of the screen\nif(ball.y+ball.radius>canvas.height){// Reset Ball position\nball.launched=false;ball.x=200;ball.y=50;ball.dx=0;ball.dy=0;checkGameStatus();}// Handle Peg collisons\nhandleCollisions();}};/**\n         * Check if game is won\n         */const checkGameStatus=()=>{// For random mode\nif(!isAdventureMode){if(pegs.current.every(peg=>peg.hit)){// Add 500 points for every shot not used\nsetGameMessage(\"You Win! Score: \"+(currentScore+shotsLeft*500));setIsGameDone(1);}else if(shotsLeft<=0){setGameMessage(\"You Lose!\");setIsGameDone(1);}}else{if(pegs.current.every(peg=>peg.hit)){// Add 500 points for every shot not used\nsetGameMessage(\"You Win! Score: \"+(currentScore+shotsLeft*500));// Change the current adventure mode level\nsetCurrentAdventureModeLevel(prev=>prev+1);changeAdventureModeLevel();}else if(shotsLeft<=0){setGameMessage(\"You Lose!\");setIsGameDone(1);setCurrentAdventureModeLevel(1);}}};/**\n         * Draw all of the elements on the canvas\n         */const animate=()=>{ctx.clearRect(0,0,canvas.width,canvas.height);drawCannon();drawPegs();drawBall();updateBall();animationFrameId=requestAnimationFrame(animate);};animate();return()=>cancelAnimationFrame(animationFrameId);},[cannonAngle,shotsLeft,currentScore]);const launchBall=()=>{// Ball will not launch is over or if there's no shots left\nif(!ballRef.current.launched&&shotsLeft>0&&gameMessage===\"\"){ballRef.current.dx=Math.cos(cannonAngle)*3;ballRef.current.dy=Math.sin(cannonAngle)*2;ballRef.current.launched=true;// Reset pegs hit\nsetPegsHitThisShot(0);// Update shot count\nsetShotsLeft(shotsLeft-1);}};/**\n     * Method that will move the cannon with the mouse position\n     */const handleMouseMove=event=>{const canvas=canvasRef.current;const rect=canvas.getBoundingClientRect();const mouseX=event.clientX-rect.left;const mouseY=event.clientY-rect.top;setCannonAngle(Math.atan2(mouseY-50,mouseX-200));};/**\n     * Reset the game randomly when not in adventure mode\n     */const resetgameRandom=()=>{// Reset ball state\nballRef.current={x:200,y:50,dx:0,dy:0,radius:10,launched:false};// Reset pegs\nconst pegGeneration=Math.floor(Math.random()*5);let pegGenShape;switch(pegGeneration){case 0:pegGenShape=pegUtils.generatePegsRandomly();break;case 1:pegGenShape=pegUtils.generatePegsCircular();break;case 2:pegGenShape=pegUtils.generatePegsHexagonal();break;case 3:pegGenShape=pegUtils.generatePegsTriangular();break;case 4:pegGenShape=pegUtils.generatePegsGrid();break;default:pegGenShape=pegUtils.generatePegsRandomly();}pegs.current=pegGenShape;// Reset game state\nsetIsGameDone(0);setIsAdventureMode(0);setShotsLeft(MAX_SHOTS);setCurrentScore(0);setGameMessage(\"\");};/**\n     * Start the adventure mode\n     */const startAdventureMode=()=>{// Reset ball automatically\nballRef.current={x:200,y:50,dx:0,dy:0,radius:10,launched:false};setIsGameDone(0);// Update adventure mode variables\nsetIsAdventureMode(1);setCurrentAdventureModeLevel(1);// Reset everything\nsetShotsLeft(MAX_SHOTS);setCurrentScore(0);setGameMessage(\"\");// Start with level 1\npegs.current=adventureLevels.LevelOne();};const changeAdventureModeLevel=()=>{// Reset ball state\nballRef.current={x:200,y:50,dx:0,dy:0,radius:10,launched:false};// Change peg layout based on the new level\nlet newPegLayout;switch(currentAdventureModeLevel+1){case 2:newPegLayout=adventureLevels.LevelTwo();break;case 3:newPegLayout=adventureLevels.LevelThree();break;default:newPegLayout=adventureLevels.LevelOne();}pegs.current=newPegLayout;// Directly update the pegs\n// Reset game state\nsetShotsLeft(MAX_SHOTS);setGameMessage(\"\");};/**\n     * Return the canvas, game message, and the button to start a new game\n     */return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:\"center\"},children:[isAdventureMode===1&&/*#__PURE__*/_jsxs(\"h2\",{id:\"gameMessage\",children:[\"Level \",currentAdventureModeLevel]}),isGameDone===0&&/*#__PURE__*/_jsxs(\"p\",{id:\"shotsLeft\",children:[\"Shots Left: \",shotsLeft]}),gameMessage&&/*#__PURE__*/_jsx(\"h2\",{id:\"gameMessage\",children:gameMessage}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:CANVAS_WIDTH,height:CANVAS_HEIGHT,className:\"border\",onClick:launchBall,onMouseMove:handleMouseMove}),isGameDone===0&&/*#__PURE__*/_jsx(\"p\",{id:\"score\",children:currentScore}),/*#__PURE__*/_jsx(\"button\",{id:\"adventureModeButton\",onClick:startAdventureMode,style:{marginTop:\"10px\",padding:\"10px\",fontSize:\"16px\"},children:\"Start Adventure Mode!\"}),/*#__PURE__*/_jsx(\"button\",{id:\"newGameButtonRandom\",onClick:resetgameRandom,style:{marginTop:\"10px\",padding:\"10px\",fontSize:\"16px\"},children:\"Start a random new game!\"})]});}","map":{"version":3,"names":["useEffect","useRef","useState","pegUtils","adventureLevels","PigCannon","piggleBall","pegHitSound","jsxs","_jsxs","jsx","_jsx","PiggleGame","canvasRef","CANVAS_HEIGHT","CANVAS_WIDTH","BALL_GRAVITY","MAX_SHOTS","cannonImage","Image","piggleImage","playPegHitSound","pitch","audioContext","window","AudioContext","webkitAudioContext","source","createBufferSource","fetch","then","response","arrayBuffer","data","decodeAudioData","buffer","playbackRate","value","connect","destination","start","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","currentScore","setCurrentScore","pegsHitThisShot","setPegsHitThisShot","gameMessage","setGameMessage","isGameDone","setIsGameDone","isAdventureMode","setIsAdventureMode","currentAdventureModeLevel","setCurrentAdventureModeLevel","pegs","prevScore","prev","pegGeneration","Math","floor","random","pegGenShape","generatePegsRandomly","generatePegsCircular","generatePegsHexagonal","generatePegsTriangular","generatePegsGrid","current","canvas","ctx","getContext","animationFrameId","src","drawCannon","save","translate","rotate","PI","cannonWidth","cannonHeight","drawImage","restore","drawBall","ballSize","drawPegs","length","forEach","peg","hit","beginPath","arc","fillStyle","type","fill","lineWidth","strokeStyle","stroke","closePath","handleCollisions","hitCount","distance","sqrt","normalX","normalY","dotProduct","updateBall","ball","width","height","checkGameStatus","every","changeAdventureModeLevel","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","cos","sin","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","resetgameRandom","startAdventureMode","LevelOne","newPegLayout","LevelTwo","LevelThree","style","textAlign","children","id","ref","className","onClick","onMouseMove","marginTop","padding","fontSize"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\nimport * as pegUtils from \"./levels/RandomLevels.js\";\nimport * as adventureLevels from \"./levels/AdventureLevels.js\";\n\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n    /* Canvas size constants */\n    const CANVAS_HEIGHT = 500;\n    const CANVAS_WIDTH = 400;\n\n    /* Constants for game mechanics */\n    const BALL_GRAVITY = 0.025;\n    const MAX_SHOTS = 10;\n\n    /* Constants for game sprites */\n    const cannonImage = useRef(new Image());\n    const piggleImage = useRef(new Image());\n\n    // For audio\n    // API call to handle peg sound     \n    const playPegHitSound = (pitch) => {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const source = audioContext.createBufferSource();\n        fetch(pegHitSound)\n            .then(response => response.arrayBuffer())\n            .then(data => audioContext.decodeAudioData(data))\n            .then(buffer => {\n                source.buffer = buffer;\n                source.playbackRate.value = pitch;\n                source.connect(audioContext.destination);\n                source.start(0);\n            });\n    };\n\n    // Ball state variables\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 9, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    // Current score variable\n    // (PROPOSED SCORE EQUATION) currentScore + (numberOfPegsHitThisShot * 100)\n    const [currentScore, setCurrentScore] = useState(0);\n    const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n    // State for game win or lose\n    const [gameMessage, setGameMessage] = useState(\"\");\n    // State for game finished (0 for no, 1 for yes)\n    const [isGameDone, setIsGameDone] = useState(0);\n    // State for if game is adventure mode (0 for no, 1 for yes)\n    const [isAdventureMode, setIsAdventureMode] = useState(0)\n    const [currentAdventureModeLevel, setCurrentAdventureModeLevel] = useState(1);\n\n    // Peg generation logic inside useEffect\n    const pegs = useRef([]);\n\n    /**\n    * This will update the score for every peg hit\n    */\n    useEffect(() => {\n        if (pegsHitThisShot > 0) {\n            // Correctly update score based on latest pegsHitThisShot\n            setCurrentScore(prevScore => prevScore + (pegsHitThisShot * 100));\n            // Play peg sounds\n            playPegHitSound(0.9 + (pegsHitThisShot * 0.1));\n            // Reset after score updates\n            setPegsHitThisShot(prev => prev++);\n        }\n    }, [pegsHitThisShot]);\n\n\n    useEffect(() => {\n        // Randomize the pegs every time\n        const pegGeneration = Math.floor(Math.random() * 5);  // Correct random generation\n\n        let pegGenShape;\n        // Generate the pegs based on the result of the random variable\n        switch (pegGeneration) {\n            case 0:\n                pegGenShape = pegUtils.generatePegsRandomly();\n                break;\n            case 1:\n                pegGenShape = pegUtils.generatePegsCircular();\n                break;\n            case 2:\n                pegGenShape = pegUtils.generatePegsHexagonal();\n                break;\n            case 3:\n                pegGenShape = pegUtils.generatePegsTriangular();\n                break;\n            case 4:\n                pegGenShape = pegUtils.generatePegsGrid();\n                break;\n            default:\n                pegGenShape = pegUtils.generatePegsRandomly();\n        }\n        // Set pegs after generation\n        pegs.current = pegGenShape;\n    }, []);\n\n    // Game loop\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n\n        // To load the images for sprites\n        cannonImage.current.src = PigCannon;\n        piggleImage.current.src = piggleBall;\n\n\n        /**\n         * Method to generate the cannon\n         */\n        const drawCannon = () => {\n            ctx.save();\n            // Move pivot point to the cannon base\n            ctx.translate(200, 50);\n            // Offset the cannon angle by pi/2 to align barrel with mouse position\n            ctx.rotate(cannonAngle - (Math.PI / 2));\n            // Cannon default size\n            const cannonWidth = 80;\n            const cannonHeight = 80;\n            // Generate cannon with position and size\n            ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n            ctx.restore();\n        };\n\n        /**\n        * Method to generate the current ball\n        */\n        const drawBall = () => {\n            var ballSize = 2.5\n            // Draw the pig sprite\n            if (ballRef.current.launched) {\n                ctx.drawImage(\n                    // The image reference\n                    piggleImage.current,\n                    // x position of the ball\n                    ballRef.current.x - ballRef.current.radius,\n                    // y position of the ball\n                    ballRef.current.y - ballRef.current.radius,\n                    ballRef.current.radius * ballSize,\n                    ballRef.current.radius * ballSize\n                );\n            }\n        };\n\n        /**\n         * Method to generate the pegs\n         */\n        const drawPegs = () => {\n            if (pegs.current.length > 0) {\n                pegs.current.forEach(peg => {\n                    if (!peg.hit) {\n                        ctx.beginPath();\n                        // Draw peg\n                        ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n\n                        // Fill color based on peg type\n                        ctx.fillStyle = peg.type === \"red\" ? \"red\" : \"blue\";\n                        ctx.fill();\n\n                        // Draw peg border\n                        ctx.lineWidth = 1.5;\n                        ctx.strokeStyle = \"black\";\n                        ctx.stroke();\n\n                        ctx.closePath();\n                    }\n                });\n            }\n        };\n\n        /**\n         * Logic to handle peg collisions\n         */\n        const handleCollisions = () => {\n            let hitCount = 0;\n            // Checks each peg if it was hit\n            pegs.current.forEach(peg => {\n                // Ignore if peg is hit\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                // Calculate if peg was hit\n                if (distance < ballRef.current.radius + peg.radius) {\n                    // Get the direction of the collision by dividing with the distance\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    // Get the ball speed value by taking the dot product\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n                    // Mark the peg as hit\n                    peg.hit = true;\n                    // Update hit count\n                    hitCount++;\n                }\n\n            });\n\n            setPegsHitThisShot(prev => prev + hitCount);\n        };\n\n        /**\n         * Update the ball position\n         */\n        const updateBall = () => {\n            let ball = ballRef.current;\n            // For ball launch logic\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                // For ball hitting walls (flip x speed)\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n                    ball.dx *= -1;\n                }\n\n                // For ball hitting ceiling (flip y speed)\n                if (ball.y + ball.radius < 0) {\n                    ball.dy *= -1;\n                }\n\n                // If ball goes out of bounds on the bottom of the screen\n                if (ball.y + ball.radius > canvas.height) {\n                    // Reset Ball position\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                // Handle Peg collisons\n                handleCollisions();\n            }\n        };\n\n        /**\n         * Check if game is won\n         */\n        const checkGameStatus = () => {\n            // For random mode\n            if (!isAdventureMode) {\n                if (pegs.current.every(peg => peg.hit)) {\n                    // Add 500 points for every shot not used\n                    setGameMessage(\"You Win! Score: \" + (currentScore + (shotsLeft * 500)));\n                    setIsGameDone(1);\n                } else if (shotsLeft <= 0) {\n                    setGameMessage(\"You Lose!\");\n                    setIsGameDone(1);\n                }\n            } else {\n                if (pegs.current.every(peg => peg.hit)) {\n                    // Add 500 points for every shot not used\n                    setGameMessage(\"You Win! Score: \" + (currentScore + (shotsLeft * 500)));\n                    // Change the current adventure mode level\n                    setCurrentAdventureModeLevel(prev => prev + 1);\n                    changeAdventureModeLevel();\n                } else if (shotsLeft <= 0) {\n                    setGameMessage(\"You Lose!\");\n                    setIsGameDone(1);\n                    setCurrentAdventureModeLevel(1);\n                }\n            }\n\n        };\n\n\n        /**\n         * Draw all of the elements on the canvas\n         */\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft, currentScore]);\n\n    const launchBall = () => {\n        // Ball will not launch is over or if there's no shots left\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            // Reset pegs hit\n            setPegsHitThisShot(0);\n            // Update shot count\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n    /**\n     * Method that will move the cannon with the mouse position\n     */\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n    \n    /**\n     * Reset the game randomly when not in adventure mode\n     */\n    const resetgameRandom = () => {\n        // Reset ball state\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        // Reset pegs\n        const pegGeneration = Math.floor(Math.random() * 5);\n        let pegGenShape;\n        switch (pegGeneration) {\n            case 0: pegGenShape = pegUtils.generatePegsRandomly(); break;\n            case 1: pegGenShape = pegUtils.generatePegsCircular(); break;\n            case 2: pegGenShape = pegUtils.generatePegsHexagonal(); break;\n            case 3: pegGenShape = pegUtils.generatePegsTriangular(); break;\n            case 4: pegGenShape = pegUtils.generatePegsGrid(); break;\n            default: pegGenShape = pegUtils.generatePegsRandomly();\n        }\n        pegs.current = pegGenShape;\n        // Reset game state\n        setIsGameDone(0);\n        setIsAdventureMode(0);\n        setShotsLeft(MAX_SHOTS);\n        setCurrentScore(0);\n        setGameMessage(\"\");\n    };\n\n\n    /**\n     * Start the adventure mode\n     */\n    const startAdventureMode = () => {\n        // Reset ball automatically\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        setIsGameDone(0);\n        // Update adventure mode variables\n        setIsAdventureMode(1);\n        setCurrentAdventureModeLevel(1);\n        // Reset everything\n        setShotsLeft(MAX_SHOTS);\n        setCurrentScore(0);\n        setGameMessage(\"\");\n\n        // Start with level 1\n        pegs.current = adventureLevels.LevelOne();\n    }\n\n    const changeAdventureModeLevel = () => {\n        // Reset ball state\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        // Change peg layout based on the new level\n        let newPegLayout;\n        switch (currentAdventureModeLevel + 1) { \n            case 2: newPegLayout = adventureLevels.LevelTwo(); break;\n            case 3: newPegLayout = adventureLevels.LevelThree(); break;\n            default: newPegLayout = adventureLevels.LevelOne();\n        }\n\n        pegs.current = newPegLayout; // Directly update the pegs\n\n        // Reset game state\n        setShotsLeft(MAX_SHOTS);\n        setGameMessage(\"\");\n    };\n\n\n    /**\n     * Return the canvas, game message, and the button to start a new game\n     */\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            {isAdventureMode === 1 && <h2 id=\"gameMessage\">Level {currentAdventureModeLevel}</h2>}\n            {isGameDone === 0 && <p id=\"shotsLeft\">Shots Left: {shotsLeft}</p>}\n            {gameMessage && <h2 id=\"gameMessage\">{gameMessage}</h2>}\n            <canvas\n                ref={canvasRef}\n                width={CANVAS_WIDTH}\n                height={CANVAS_HEIGHT}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n            {isGameDone === 0 && <p id=\"score\">{currentScore}</p>}\n            <button id=\"adventureModeButton\" onClick={startAdventureMode} style={{ marginTop: \"10px\", padding: \"10px\", fontSize: \"16px\" }}>\n                Start Adventure Mode!\n            </button>\n            <button id=\"newGameButtonRandom\" onClick={resetgameRandom} style={{ marginTop: \"10px\", padding: \"10px\", fontSize: \"16px\" }}>\n                Start a random new game!\n            </button>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
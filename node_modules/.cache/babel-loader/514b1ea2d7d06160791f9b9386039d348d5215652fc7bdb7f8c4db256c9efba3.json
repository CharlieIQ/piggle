{"ast":null,"code":"var _jsxFileName = \"/Users/charliemclaughlin/Desktop/Programming/JavaScript/Piggle/piggle/src/PiggleGame.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PiggleGame() {\n  _s();\n  const canvasRef = useRef(null);\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 10,\n    launched: false\n  });\n  const [cannonAngle, setCannonAngle] = useState(0);\n\n  // Constants to control game physics and speed\n  const INITIAL_SPEED = 5; // Initial ball speed\n  const GRAVITY = 0.1; // Gravity force\n  const MAX_HORIZONTAL_SPEED = 10; // Maximum horizontal speed\n\n  const generatePegs = () => Array.from({\n    length: 10\n  }, () => ({\n    x: Math.random() * 380 + 10,\n    y: Math.random() * 300 + 100,\n    radius: 10,\n    hit: false\n  }));\n  const pegs = useRef(generatePegs());\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n    const drawCannon = () => {\n      ctx.save();\n      ctx.translate(200, 50);\n      ctx.rotate(cannonAngle);\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(-10, -10, 30, 20);\n      ctx.restore();\n    };\n    const drawBall = () => {\n      ctx.beginPath();\n      ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n      ctx.closePath();\n    };\n    const drawPegs = () => {\n      pegs.current.forEach(peg => {\n        if (!peg.hit) {\n          ctx.beginPath();\n          ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n          ctx.fillStyle = \"blue\";\n          ctx.fill();\n          ctx.closePath();\n        }\n      });\n    };\n    const handleCollisions = () => {\n      pegs.current.forEach(peg => {\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < ballRef.current.radius + peg.radius) {\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n          peg.hit = true;\n        }\n      });\n    };\n    const updateBall = () => {\n      let ball = ballRef.current;\n      if (ball.launched) {\n        ball.dy += GRAVITY; // Apply gravity\n\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n\n        // Ensure ball's horizontal speed does not exceed max speed\n        if (Math.abs(ball.dx) > MAX_HORIZONTAL_SPEED) {\n          ball.dx = Math.sign(ball.dx) * MAX_HORIZONTAL_SPEED;\n        }\n\n        // Wall collisions\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n          ball.dx *= -1; // Reverse horizontal velocity on wall hit\n        }\n\n        // Ball hits the ground\n        if (ball.y + ball.radius > canvas.height) {\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n        }\n        handleCollisions();\n      }\n    };\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle]);\n  const launchBall = () => {\n    if (!ballRef.current.launched) {\n      // Use the INITIAL_SPEED constant to set ball velocity based on cannon angle\n      ballRef.current.dx = Math.cos(cannonAngle) * INITIAL_SPEED;\n      ballRef.current.dy = Math.sin(cannonAngle) * INITIAL_SPEED;\n      ballRef.current.launched = true;\n    }\n  };\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 400,\n      height: 500,\n      className: \"border\",\n      onClick: launchBall,\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(PiggleGame, \"ANQVY8HOxkQVjCc8yt1wAnelezA=\");\n_c = PiggleGame;\nvar _c;\n$RefreshReg$(_c, \"PiggleGame\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","PiggleGame","_s","canvasRef","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","INITIAL_SPEED","GRAVITY","MAX_HORIZONTAL_SPEED","generatePegs","Array","from","length","Math","random","hit","pegs","canvas","current","ctx","getContext","animationFrameId","drawCannon","save","translate","rotate","fillStyle","fillRect","restore","drawBall","beginPath","arc","PI","fill","closePath","drawPegs","forEach","peg","handleCollisions","distance","sqrt","normalX","normalY","dotProduct","updateBall","ball","abs","sign","width","height","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","cos","sin","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","children","ref","className","onClick","onMouseMove","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/JavaScript/Piggle/piggle/src/PiggleGame.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport default function PiggleGame() {\n  const canvasRef = useRef(null);\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 10,\n    launched: false\n  });\n\n  const [cannonAngle, setCannonAngle] = useState(0);\n\n  // Constants to control game physics and speed\n  const INITIAL_SPEED = 5;  // Initial ball speed\n  const GRAVITY = 0.1;  // Gravity force\n  const MAX_HORIZONTAL_SPEED = 10;  // Maximum horizontal speed\n\n  const generatePegs = () => (\n    Array.from({ length: 10 }, () => ({\n      x: Math.random() * 380 + 10,\n      y: Math.random() * 300 + 100,\n      radius: 10,\n      hit: false\n    }))\n  );\n\n  const pegs = useRef(generatePegs());\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n\n    const drawCannon = () => {\n      ctx.save();\n      ctx.translate(200, 50);\n      ctx.rotate(cannonAngle);\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(-10, -10, 30, 20);\n      ctx.restore();\n    };\n\n    const drawBall = () => {\n      ctx.beginPath();\n      ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n      ctx.closePath();\n    };\n\n    const drawPegs = () => {\n      pegs.current.forEach(peg => {\n        if (!peg.hit) {\n          ctx.beginPath();\n          ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n          ctx.fillStyle = \"blue\";\n          ctx.fill();\n          ctx.closePath();\n        }\n      });\n    };\n\n    const handleCollisions = () => {\n      pegs.current.forEach(peg => {\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < ballRef.current.radius + peg.radius) {\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n          peg.hit = true;\n        }\n      });\n    };\n\n    const updateBall = () => {\n      let ball = ballRef.current;\n      if (ball.launched) {\n        ball.dy += GRAVITY;  // Apply gravity\n\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n\n        // Ensure ball's horizontal speed does not exceed max speed\n        if (Math.abs(ball.dx) > MAX_HORIZONTAL_SPEED) {\n          ball.dx = Math.sign(ball.dx) * MAX_HORIZONTAL_SPEED;\n        }\n\n        // Wall collisions\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n          ball.dx *= -1;  // Reverse horizontal velocity on wall hit\n        }\n\n        // Ball hits the ground\n        if (ball.y + ball.radius > canvas.height) {\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n        }\n\n        handleCollisions();\n      }\n    };\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle]);\n\n  const launchBall = () => {\n    if (!ballRef.current.launched) {\n      // Use the INITIAL_SPEED constant to set ball velocity based on cannon angle\n      ballRef.current.dx = Math.cos(cannonAngle) * INITIAL_SPEED;\n      ballRef.current.dy = Math.sin(cannonAngle) * INITIAL_SPEED;\n      ballRef.current.launched = true;\n    }\n  };\n\n  const handleMouseMove = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={400}\n        height={500}\n        className=\"border\"\n        onClick={launchBall}\n        onMouseMove={handleMouseMove}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
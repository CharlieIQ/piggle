{"ast":null,"code":"var _jsxFileName = \"/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js\",\n  _s = $RefreshSig$();\n/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PiggleGame() {\n  _s();\n  // Reference to canvas element\n  const canvasRef = useRef(null);\n  /* Canvas size constants */\n  const CANVAS_HEIGHT = 500;\n  const CANVAS_WIDTH = 400;\n\n  /* Constants for game mechanics */\n  const BALL_GRAVITY = 0.025;\n  const MAX_SHOTS = 10;\n  const NUMBER_OF_PEGS = 20;\n  const PEG_RADIUS = 15;\n\n  /* Constants for game sprites */\n  const cannonImage = useRef(new Image());\n  const piggleImage = useRef(new Image());\n\n  // For audio\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  const source = audioContext.createBufferSource();\n  // API call to handle peg sound\n  const playPegHitSound = (pitch, hitCount) => {\n    fetch(pegHitSound).then(response => response.arrayBuffer()).then(data => audioContext.decodeAudioData(data)).then(buffer => {\n      source.buffer = buffer;\n      source.playbackRate.value = pitch + hitCount % 10 * 0.1;\n      source.connect(audioContext.destination);\n      source.start(0);\n    });\n  };\n\n  // Ball state variables\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 10,\n    launched: false\n  });\n\n  // State for cannon angle\n  const [cannonAngle, setCannonAngle] = useState(0);\n  // State for remaining shots\n  const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n  // Current score variable\n  // (PROPOSED SCORE EQUATION) currentScore + (numberOfPegsHitThisShot * 100)\n  const [currentScore, setCurrentScore] = useState(0);\n  const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n  // State for game win or lose\n  const [gameMessage, setGameMessage] = useState(\"\");\n  // State for game finished (0 for no, 1 for yes)\n  const [isGameDone, setIsGameDone] = useState(0);\n\n  /**\n   * This method will generate the pegs randomly\n   * @returns The pegs generated in a random\n   */\n  const generatePegsRandomly = () => Array.from({\n    length: NUMBER_OF_PEGS\n  }, () => ({\n    x: Math.random() * 380 + 10,\n    y: Math.random() * 300 + 100,\n    radius: PEG_RADIUS,\n    hit: false\n  }));\n\n  /**\n   * This method will generate the pegs in a square grid\n   * @returns The pegs in a grid\n   */\n  const generatePegsGrid = () => {\n    // Rows and column number\n    const rows = 5;\n    const cols = 5;\n    // Peg spacing\n    const spacing = 50;\n    // Starting position for the top left peg\n    const startX = 100;\n    const startY = 170;\n\n    // Generate the pegs\n    let pegs = [];\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        pegs.push({\n          x: startX + col * spacing,\n          y: startY + row * spacing,\n          radius: PEG_RADIUS,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n\n  /**\n   * Generate pegs in a circular shape\n   * @returns The pegs in a circle\n   */\n  const generatePegsCircular = () => {\n    const centerX = 200;\n    const centerY = 300;\n    const radius = 100;\n    const angleIncrement = 2 * Math.PI / NUMBER_OF_PEGS;\n    let pegs = [];\n    for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n      const angle = angleIncrement * i;\n      pegs.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n    return pegs;\n  };\n\n  /**\n   * Generate pegs in a hexagonal formation\n   * @returns Pegs generated in a hexagon\n   */\n  const generatePegsHexagonal = () => {\n    let pegs = [];\n    const rows = 5; // Number of rows\n    const cols = 5; // Number of columns\n    const spacing = 50; // Horizontal spacing between pegs\n    const startX = 100; // Initial X position\n    const startY = 150; // Initial Y position\n    const verticalSpacing = spacing * Math.sqrt(3) / 2; // Correct vertical spacing for hex grid\n\n    for (let row = 0; row < rows; row++) {\n      // Shift odd-numbered rows slightly right (half of the spacing)\n      const rowOffset = row % 2 === 0 ? 0 : spacing / 2;\n      for (let col = 0; col < cols; col++) {\n        pegs.push({\n          x: startX + col * spacing + rowOffset,\n          // Apply offset only to odd rows\n          y: startY + row * verticalSpacing,\n          // Correct hexagonal spacing\n          radius: PEG_RADIUS,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n\n  /**\n   * Generate the pegs in a triangular shape\n   * @returns The pegs in a triangle shape\n   */\n  const generatePegsTriangular = () => {\n    // Array for pegs\n    let pegs = [];\n    const numRows = 5;\n    // Start x for first row\n    const xPos = 200;\n    // Start y for first row\n    const yPos = 220;\n    // Peg spacing\n    const pegSpacing = 40;\n    for (let row = 0; row < numRows; row++) {\n      // Center the row by adjusting the starting x position based on the row number\n      const startX = xPos - row * pegSpacing / 2;\n      for (let col = 0; col <= row; col++) {\n        // Calculate the x and y positions for each peg in the current row\n        const x = startX + col * pegSpacing;\n        const y = yPos + row * pegSpacing;\n        pegs.push({\n          x: x,\n          y: y,\n          radius: PEG_RADIUS,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n\n  // Peg generation logic inside useEffect\n  const pegs = useRef([]);\n\n  /**\n       * This will update the score for every peg hit\n       */\n  useEffect(() => {\n    if (pegsHitThisShot > 0) {\n      // Correctly update score based on latest pegsHitThisShot\n      setCurrentScore(prevScore => prevScore + pegsHitThisShot * 100);\n\n      // Reset after score updates\n      setPegsHitThisShot(0);\n    }\n  }, [pegsHitThisShot]);\n  useEffect(() => {\n    // Randomize the pegs every time\n    const pegGeneration = Math.floor(Math.random() * 5); // Correct random generation\n\n    let pegGenShape;\n    // Generate the pegs based on the result of the random variable\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = generatePegsGrid();\n        break;\n      default:\n        pegGenShape = generatePegsRandomly();\n    }\n    // Set pegs after generation\n    pegs.current = pegGenShape;\n  }, []);\n\n  // Game loop\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n\n    // To load the images for sprites\n    cannonImage.current.src = PigCannon;\n    piggleImage.current.src = piggleBall;\n\n    /**\n     * Method to generate the cannon\n     */\n    const drawCannon = () => {\n      ctx.save();\n      // Move pivot point to the cannon base\n      ctx.translate(200, 50);\n      // Offset the cannon angle by pi/2 to align barrel with mouse position\n      ctx.rotate(cannonAngle - Math.PI / 2);\n      // Cannon default size\n      const cannonWidth = 40;\n      const cannonHeight = 80;\n      // Generate cannon with position and size\n      ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n      ctx.restore();\n    };\n\n    /**\n    * Method to generate the current ball\n    */\n    const drawBall = () => {\n      var ballSize = 2.5;\n      // Draw the pig sprite\n      if (ballRef.current.launched) {\n        ctx.drawImage(\n        // The image reference\n        piggleImage.current,\n        // x position of the ball\n        ballRef.current.x - ballRef.current.radius,\n        // y position of the ball\n        ballRef.current.y - ballRef.current.radius, ballRef.current.radius * ballSize, ballRef.current.radius * ballSize);\n      }\n    };\n\n    /**\n     * Method to generate the pegs\n     */\n    const drawPegs = () => {\n      if (pegs.current.length > 0) {\n        pegs.current.forEach(peg => {\n          if (!peg.hit) {\n            ctx.beginPath();\n            ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"blue\";\n            ctx.fill();\n            ctx.closePath();\n          }\n        });\n      }\n    };\n\n    /**\n     * Logic to handle peg collisions\n     */\n    const handleCollisions = () => {\n      let hitCount = 0;\n      // Checks each peg if it was hit\n      pegs.current.forEach(peg => {\n        // Ignore if peg is hit\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        // Calculate if peg was hit\n        if (distance < ballRef.current.radius + peg.radius) {\n          // Get the direction of the collision by dividing with the distance\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          // Get the ball speed value by taking the dot product\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n\n          // Mark the peg as hit\n          peg.hit = true;\n          hitCount++;\n          // Play peg sounds\n          playPegHitSound(1, hitCount);\n          console.log(hitCount);\n        }\n      });\n      setPegsHitThisShot(prev => prev + hitCount);\n    };\n\n    /**\n     * Update the ball position\n     */\n    const updateBall = () => {\n      let ball = ballRef.current;\n      // For ball launch logic\n      if (ball.launched) {\n        ball.dy += BALL_GRAVITY;\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n\n        // For ball hitting walls (flip x speed)\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n          ball.dx *= -1;\n        }\n\n        // For ball hitting ceiling (flip y speed)\n        if (ball.y + ball.radius < 0) {\n          ball.dy *= -1;\n        }\n\n        // If ball goes out of bounds on the bottom of the screen\n        if (ball.y + ball.radius > canvas.height) {\n          // Reset Ball position\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n          checkGameStatus();\n        }\n        // Handle Peg collisons\n        handleCollisions();\n      }\n    };\n\n    /**\n     * Check if game is won\n     */\n    const checkGameStatus = () => {\n      if (pegs.current.every(peg => peg.hit)) {\n        // Add 500 points for every shot not used\n        setGameMessage(\"You Win! Score = \" + (currentScore + shotsLeft * 500));\n        setIsGameDone(1);\n      } else if (shotsLeft <= 0) {\n        setGameMessage(\"You Lose!\");\n      }\n    };\n\n    /**\n     * Draw all of the elements on the canvas\n     */\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle, shotsLeft, currentScore]);\n  const launchBall = () => {\n    // Ball will not launch is over or if there's no shots left\n    if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n      ballRef.current.dx = Math.cos(cannonAngle) * 3;\n      ballRef.current.dy = Math.sin(cannonAngle) * 2;\n      ballRef.current.launched = true;\n      // Update shot count\n      setShotsLeft(shotsLeft - 1);\n    }\n  };\n  /**\n   * Method that will move the cannon with the mouse position\n   */\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n  const resetgameRandom = () => {\n    // Reset ball state\n    ballRef.current = {\n      x: 200,\n      y: 50,\n      dx: 0,\n      dy: 0,\n      radius: 10,\n      launched: false\n    };\n\n    // Reset pegs\n    const pegGeneration = Math.floor(Math.random() * 5);\n    let pegGenShape;\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = generatePegsGrid();\n        break;\n      default:\n        pegGenShape = generatePegsRandomly();\n    }\n    pegs.current = pegGenShape;\n\n    // Reset game state\n    setShotsLeft(MAX_SHOTS);\n    setGameMessage(\"\");\n  };\n\n  /**\n   * Return the canvas, game message, and the button to start a new game\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [isGameDone === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"shotsLeft\",\n      children: [\"Shots Left: \", shotsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 34\n    }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"gameMessage\",\n      children: gameMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      className: \"border\",\n      onClick: launchBall,\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }, this), isGameDone === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"score\",\n      children: currentScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"newGameButtonRandom\",\n      onClick: resetgameRandom,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\",\n        fontSize: \"16px\"\n      },\n      children: \"Start a random new game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 9\n  }, this);\n}\n_s(PiggleGame, \"fXc4k1w3xnJXKRHQ/E7WFbFlsM4=\");\n_c = PiggleGame;\nvar _c;\n$RefreshReg$(_c, \"PiggleGame\");","map":{"version":3,"names":["useEffect","useRef","useState","PigCannon","piggleBall","pegHitSound","jsxDEV","_jsxDEV","PiggleGame","_s","canvasRef","CANVAS_HEIGHT","CANVAS_WIDTH","BALL_GRAVITY","MAX_SHOTS","NUMBER_OF_PEGS","PEG_RADIUS","cannonImage","Image","piggleImage","audioContext","window","AudioContext","webkitAudioContext","source","createBufferSource","playPegHitSound","pitch","hitCount","fetch","then","response","arrayBuffer","data","decodeAudioData","buffer","playbackRate","value","connect","destination","start","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","currentScore","setCurrentScore","pegsHitThisShot","setPegsHitThisShot","gameMessage","setGameMessage","isGameDone","setIsGameDone","generatePegsRandomly","Array","from","length","Math","random","hit","generatePegsGrid","rows","cols","spacing","startX","startY","pegs","row","col","push","generatePegsCircular","centerX","centerY","angleIncrement","PI","i","angle","cos","sin","generatePegsHexagonal","verticalSpacing","sqrt","rowOffset","generatePegsTriangular","numRows","xPos","yPos","pegSpacing","prevScore","pegGeneration","floor","pegGenShape","current","canvas","ctx","getContext","animationFrameId","src","drawCannon","save","translate","rotate","cannonWidth","cannonHeight","drawImage","restore","drawBall","ballSize","drawPegs","forEach","peg","beginPath","arc","fillStyle","fill","closePath","handleCollisions","distance","normalX","normalY","dotProduct","console","log","prev","updateBall","ball","width","height","checkGameStatus","every","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","resetgameRandom","style","textAlign","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onClick","onMouseMove","marginTop","padding","fontSize","_c","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n    /* Canvas size constants */\n    const CANVAS_HEIGHT = 500;\n    const CANVAS_WIDTH = 400;\n\n    /* Constants for game mechanics */\n    const BALL_GRAVITY = 0.025;\n    const MAX_SHOTS = 10;\n    const NUMBER_OF_PEGS = 20;\n    const PEG_RADIUS = 15;\n\n    /* Constants for game sprites */\n    const cannonImage = useRef(new Image());\n    const piggleImage = useRef(new Image());\n\n    // For audio\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const source = audioContext.createBufferSource();\n    // API call to handle peg sound\n    const playPegHitSound = (pitch, hitCount) => {        \n        fetch(pegHitSound)\n            .then(response => response.arrayBuffer())\n            .then(data => audioContext.decodeAudioData(data))\n            .then(buffer => {\n                source.buffer = buffer;\n                source.playbackRate.value = pitch + ((hitCount % 10)*0.1);\n                source.connect(audioContext.destination);\n                source.start(0);\n            });\n    };\n\n    // Ball state variables\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    // Current score variable\n    // (PROPOSED SCORE EQUATION) currentScore + (numberOfPegsHitThisShot * 100)\n    const [currentScore, setCurrentScore] = useState(0);\n    const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n    // State for game win or lose\n    const [gameMessage, setGameMessage] = useState(\"\");\n    // State for game finished (0 for no, 1 for yes)\n    const [isGameDone, setIsGameDone] = useState(0);\n\n    /**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\n    const generatePegsRandomly = () => (\n        Array.from({ length: NUMBER_OF_PEGS }, () => ({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false\n        }))\n    );\n\n    /**\n     * This method will generate the pegs in a square grid\n     * @returns The pegs in a grid\n     */\n    const generatePegsGrid = () => {\n        // Rows and column number\n        const rows = 5;\n        const cols = 5;\n        // Peg spacing\n        const spacing = 50;\n        // Starting position for the top left peg\n        const startX = 100;\n        const startY = 170;\n\n        // Generate the pegs\n        let pegs = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                pegs.push({\n                    x: startX + col * spacing,\n                    y: startY + row * spacing,\n                    radius: PEG_RADIUS,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    /**\n     * Generate pegs in a circular shape\n     * @returns The pegs in a circle\n     */\n    const generatePegsCircular = () => {\n        const centerX = 200;\n        const centerY = 300;\n        const radius = 100;\n        const angleIncrement = (2 * Math.PI) / NUMBER_OF_PEGS;\n        let pegs = [];\n\n        for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n            const angle = angleIncrement * i;\n            pegs.push({\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle),\n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n        return pegs;\n    };\n\n    /**\n     * Generate pegs in a hexagonal formation\n     * @returns Pegs generated in a hexagon\n     */\n    const generatePegsHexagonal = () => {\n        let pegs = [];\n        const rows = 5;  // Number of rows\n        const cols = 5;  // Number of columns\n        const spacing = 50; // Horizontal spacing between pegs\n        const startX = 100; // Initial X position\n        const startY = 150; // Initial Y position\n        const verticalSpacing = spacing * Math.sqrt(3) / 2; // Correct vertical spacing for hex grid\n\n        for (let row = 0; row < rows; row++) {\n            // Shift odd-numbered rows slightly right (half of the spacing)\n            const rowOffset = (row % 2 === 0) ? 0 : spacing / 2;\n\n            for (let col = 0; col < cols; col++) {\n                pegs.push({\n                    x: startX + col * spacing + rowOffset, // Apply offset only to odd rows\n                    y: startY + row * verticalSpacing, // Correct hexagonal spacing\n                    radius: PEG_RADIUS,\n                    hit: false\n                });\n            }\n        }\n\n        return pegs;\n    };\n\n\n\n    /**\n     * Generate the pegs in a triangular shape\n     * @returns The pegs in a triangle shape\n     */\n    const generatePegsTriangular = () => {\n        // Array for pegs\n        let pegs = [];\n        const numRows = 5;\n        // Start x for first row\n        const xPos = 200;\n        // Start y for first row\n        const yPos = 220;\n        // Peg spacing\n        const pegSpacing = 40;\n\n        for (let row = 0; row < numRows; row++) {\n            // Center the row by adjusting the starting x position based on the row number\n            const startX = xPos - (row * pegSpacing) / 2;\n\n            for (let col = 0; col <= row; col++) {\n                // Calculate the x and y positions for each peg in the current row\n                const x = startX + col * pegSpacing;\n                const y = yPos + row * pegSpacing;\n                pegs.push({\n                    x: x,\n                    y: y,\n                    radius: PEG_RADIUS,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    // Peg generation logic inside useEffect\n    const pegs = useRef([]);\n\n    /**\n         * This will update the score for every peg hit\n         */\n    useEffect(() => {\n        if (pegsHitThisShot > 0) {\n            // Correctly update score based on latest pegsHitThisShot\n            setCurrentScore(prevScore => prevScore + (pegsHitThisShot * 100));\n\n            // Reset after score updates\n            setPegsHitThisShot(0);\n        }\n    }, [pegsHitThisShot]);\n\n\n    useEffect(() => {\n        // Randomize the pegs every time\n        const pegGeneration = Math.floor(Math.random() * 5);  // Correct random generation\n\n        let pegGenShape;\n        // Generate the pegs based on the result of the random variable\n        switch (pegGeneration) {\n            case 0:\n                pegGenShape = generatePegsRandomly();\n                break;\n            case 1:\n                pegGenShape = generatePegsCircular();\n                break;\n            case 2:\n                pegGenShape = generatePegsHexagonal();\n                break;\n            case 3:\n                pegGenShape = generatePegsTriangular();\n                break;\n            case 4:\n                pegGenShape = generatePegsGrid();\n                break;\n            default:\n                pegGenShape = generatePegsRandomly();\n        }\n        // Set pegs after generation\n        pegs.current = pegGenShape;\n    }, []);\n\n    // Game loop\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n\n        // To load the images for sprites\n        cannonImage.current.src = PigCannon;\n        piggleImage.current.src = piggleBall;\n\n\n        /**\n         * Method to generate the cannon\n         */\n        const drawCannon = () => {\n            ctx.save();\n            // Move pivot point to the cannon base\n            ctx.translate(200, 50);\n            // Offset the cannon angle by pi/2 to align barrel with mouse position\n            ctx.rotate(cannonAngle - (Math.PI / 2));\n            // Cannon default size\n            const cannonWidth = 40;\n            const cannonHeight = 80;\n            // Generate cannon with position and size\n            ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n            ctx.restore();\n        };\n\n        /**\n        * Method to generate the current ball\n        */\n        const drawBall = () => {\n            var ballSize = 2.5\n            // Draw the pig sprite\n            if (ballRef.current.launched) {\n                ctx.drawImage(\n                    // The image reference\n                    piggleImage.current,\n                    // x position of the ball\n                    ballRef.current.x - ballRef.current.radius,\n                    // y position of the ball\n                    ballRef.current.y - ballRef.current.radius,\n                    ballRef.current.radius * ballSize,\n                    ballRef.current.radius * ballSize\n                );\n            }\n        };\n\n        /**\n         * Method to generate the pegs\n         */\n        const drawPegs = () => {\n            if (pegs.current.length > 0) {\n                pegs.current.forEach(peg => {\n                    if (!peg.hit) {\n                        ctx.beginPath();\n                        ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n                        ctx.fillStyle = \"blue\";\n                        ctx.fill();\n                        ctx.closePath();\n                    }\n                });\n            }\n        };\n\n        /**\n         * Logic to handle peg collisions\n         */\n        const handleCollisions = () => {\n            let hitCount = 0;\n            // Checks each peg if it was hit\n            pegs.current.forEach(peg => {\n                // Ignore if peg is hit\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                // Calculate if peg was hit\n                if (distance < ballRef.current.radius + peg.radius) {\n                    // Get the direction of the collision by dividing with the distance\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    // Get the ball speed value by taking the dot product\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n\n                    // Mark the peg as hit\n                    peg.hit = true;\n\n                    hitCount++;\n                    // Play peg sounds\n                    playPegHitSound(1, hitCount);\n                    console.log(hitCount);  \n                }\n            });\n\n            setPegsHitThisShot(prev => prev + hitCount);\n        };\n\n        /**\n         * Update the ball position\n         */\n        const updateBall = () => {\n            let ball = ballRef.current;\n            // For ball launch logic\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                // For ball hitting walls (flip x speed)\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n                    ball.dx *= -1;\n                }\n\n                // For ball hitting ceiling (flip y speed)\n                if (ball.y + ball.radius < 0) {\n                    ball.dy *= -1;\n                }\n\n                // If ball goes out of bounds on the bottom of the screen\n                if (ball.y + ball.radius > canvas.height) {\n                    // Reset Ball position\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                // Handle Peg collisons\n                handleCollisions();\n            }\n        };\n\n        /**\n         * Check if game is won\n         */\n        const checkGameStatus = () => {\n            if (pegs.current.every(peg => peg.hit)) {\n                // Add 500 points for every shot not used\n                setGameMessage(\"You Win! Score = \" + (currentScore + (shotsLeft * 500)));\n                setIsGameDone(1);\n            } else if (shotsLeft <= 0) {\n                setGameMessage(\"You Lose!\");\n            }\n        };\n\n        /**\n         * Draw all of the elements on the canvas\n         */\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft, currentScore]);\n\n    const launchBall = () => {\n        // Ball will not launch is over or if there's no shots left\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            // Update shot count\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n    /**\n     * Method that will move the cannon with the mouse position\n     */\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n\n    const resetgameRandom = () => {\n        // Reset ball state\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        // Reset pegs\n        const pegGeneration = Math.floor(Math.random() * 5);\n        let pegGenShape;\n        switch (pegGeneration) {\n            case 0: pegGenShape = generatePegsRandomly(); break;\n            case 1: pegGenShape = generatePegsCircular(); break;\n            case 2: pegGenShape = generatePegsHexagonal(); break;\n            case 3: pegGenShape = generatePegsTriangular(); break;\n            case 4: pegGenShape = generatePegsGrid(); break;\n            default: pegGenShape = generatePegsRandomly();\n        }\n        pegs.current = pegGenShape;\n\n        // Reset game state\n        setShotsLeft(MAX_SHOTS);\n        setGameMessage(\"\");\n    };\n\n    /**\n     * Return the canvas, game message, and the button to start a new game\n     */\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            {isGameDone === 0 && <p id=\"shotsLeft\">Shots Left: {shotsLeft}</p>}\n            {gameMessage && <h2 id=\"gameMessage\">{gameMessage}</h2>}\n            <canvas\n                ref={canvasRef}\n                width={CANVAS_WIDTH}\n                height={CANVAS_HEIGHT}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n            {isGameDone === 0 && <p id=\"score\">{currentScore}</p>}\n            <button id=\"newGameButtonRandom\" onClick={resetgameRandom} style={{ marginTop: \"10px\", padding: \"10px\", fontSize: \"16px\" }}>\n                Start a random new game!\n            </button>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
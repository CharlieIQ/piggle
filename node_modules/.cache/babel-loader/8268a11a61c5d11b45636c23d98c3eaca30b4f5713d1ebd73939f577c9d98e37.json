{"ast":null,"code":"var _jsxFileName = \"/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js\",\n  _s = $RefreshSig$();\n/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\nimport * as pegUtils from \"./PegUtils.js\";\n\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PiggleGame() {\n  _s();\n  // Reference to canvas element\n  const canvasRef = useRef(null);\n  /* Canvas size constants */\n  const CANVAS_HEIGHT = 500;\n  const CANVAS_WIDTH = 400;\n\n  /* Constants for game mechanics */\n  const BALL_GRAVITY = 0.025;\n  const MAX_SHOTS = 10;\n\n  /* Constants for game sprites */\n  const cannonImage = useRef(new Image());\n  const piggleImage = useRef(new Image());\n\n  // For audio\n  // API call to handle peg sound     \n  const playPegHitSound = pitch => {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const source = audioContext.createBufferSource();\n    fetch(pegHitSound).then(response => response.arrayBuffer()).then(data => audioContext.decodeAudioData(data)).then(buffer => {\n      source.buffer = buffer;\n      source.playbackRate.value = pitch;\n      source.connect(audioContext.destination);\n      source.start(0);\n    });\n  };\n\n  // Ball state variables\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 10,\n    launched: false\n  });\n\n  // State for cannon angle\n  const [cannonAngle, setCannonAngle] = useState(0);\n  // State for remaining shots\n  const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n  // Current score variable\n  // (PROPOSED SCORE EQUATION) currentScore + (numberOfPegsHitThisShot * 100)\n  const [currentScore, setCurrentScore] = useState(0);\n  const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n  // State for game win or lose\n  const [gameMessage, setGameMessage] = useState(\"\");\n  // State for game finished (0 for no, 1 for yes)\n  const [isGameDone, setIsGameDone] = useState(0);\n\n  // Peg generation logic inside useEffect\n  const pegs = useRef([]);\n\n  /**\n  * This will update the score for every peg hit\n  */\n  useEffect(() => {\n    if (pegsHitThisShot > 0) {\n      // Correctly update score based on latest pegsHitThisShot\n      setCurrentScore(prevScore => prevScore + pegsHitThisShot * 100);\n      // Play peg sounds\n      playPegHitSound(0.9 + pegsHitThisShot * 0.1);\n      console.log(currentScore);\n      console.log(\"pitch = \" + (0.9 + pegsHitThisShot * 0.1));\n      // Reset after score updates\n      setPegsHitThisShot(prev => prev++);\n    }\n  }, [pegsHitThisShot]);\n  useEffect(() => {\n    // Randomize the pegs every time\n    const pegGeneration = Math.floor(Math.random() * 5); // Correct random generation\n\n    let pegGenShape;\n    // Generate the pegs based on the result of the random variable\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = pegUtils.generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = pegUtils.generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = pegUtils.generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = pegUtils.generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = pegUtils.generatePegsGrid();\n        break;\n      default:\n        pegGenShape = pegUtils.generatePegsRandomly();\n    }\n    // Set pegs after generation\n    pegs.current = pegGenShape;\n  }, []);\n\n  // Game loop\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n\n    // To load the images for sprites\n    cannonImage.current.src = PigCannon;\n    piggleImage.current.src = piggleBall;\n\n    /**\n     * Method to generate the cannon\n     */\n    const drawCannon = () => {\n      ctx.save();\n      // Move pivot point to the cannon base\n      ctx.translate(200, 50);\n      // Offset the cannon angle by pi/2 to align barrel with mouse position\n      ctx.rotate(cannonAngle - Math.PI / 2);\n      // Cannon default size\n      const cannonWidth = 40;\n      const cannonHeight = 80;\n      // Generate cannon with position and size\n      ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n      ctx.restore();\n    };\n\n    /**\n    * Method to generate the current ball\n    */\n    const drawBall = () => {\n      var ballSize = 2.5;\n      // Draw the pig sprite\n      if (ballRef.current.launched) {\n        ctx.drawImage(\n        // The image reference\n        piggleImage.current,\n        // x position of the ball\n        ballRef.current.x - ballRef.current.radius,\n        // y position of the ball\n        ballRef.current.y - ballRef.current.radius, ballRef.current.radius * ballSize, ballRef.current.radius * ballSize);\n      }\n    };\n\n    /**\n     * Method to generate the pegs\n     */\n    const drawPegs = () => {\n      if (pegs.current.length > 0) {\n        pegs.current.forEach(peg => {\n          if (!peg.hit) {\n            ctx.beginPath();\n            ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"blue\";\n            ctx.fill();\n            ctx.closePath();\n          }\n        });\n      }\n    };\n\n    /**\n     * Logic to handle peg collisions\n     */\n    const handleCollisions = () => {\n      let hitCount = 0;\n      // Checks each peg if it was hit\n      pegs.current.forEach(peg => {\n        // Ignore if peg is hit\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        // Calculate if peg was hit\n        if (distance < ballRef.current.radius + peg.radius) {\n          // Get the direction of the collision by dividing with the distance\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          // Get the ball speed value by taking the dot product\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n\n          // Mark the peg as hit\n          peg.hit = true;\n          hitCount++;\n        }\n      });\n      setPegsHitThisShot(prev => prev + hitCount);\n    };\n\n    /**\n     * Update the ball position\n     */\n    const updateBall = () => {\n      let ball = ballRef.current;\n      // For ball launch logic\n      if (ball.launched) {\n        ball.dy += BALL_GRAVITY;\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n\n        // For ball hitting walls (flip x speed)\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n          ball.dx *= -1;\n        }\n\n        // For ball hitting ceiling (flip y speed)\n        if (ball.y + ball.radius < 0) {\n          ball.dy *= -1;\n        }\n\n        // If ball goes out of bounds on the bottom of the screen\n        if (ball.y + ball.radius > canvas.height) {\n          // Reset Ball position\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n          checkGameStatus();\n        }\n        // Handle Peg collisons\n        handleCollisions();\n      }\n    };\n\n    /**\n     * Check if game is won\n     */\n    const checkGameStatus = () => {\n      if (pegs.current.every(peg => peg.hit)) {\n        // Add 500 points for every shot not used\n        setGameMessage(\"You Win! Score = \" + (currentScore + shotsLeft * 500));\n        setIsGameDone(1);\n      } else if (shotsLeft <= 0) {\n        setGameMessage(\"You Lose!\");\n      }\n    };\n\n    /**\n     * Draw all of the elements on the canvas\n     */\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle, shotsLeft, currentScore]);\n  const launchBall = () => {\n    // Ball will not launch is over or if there's no shots left\n    if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n      ballRef.current.dx = Math.cos(cannonAngle) * 3;\n      ballRef.current.dy = Math.sin(cannonAngle) * 2;\n      ballRef.current.launched = true;\n      // Reset pegs hit\n      setPegsHitThisShot(0);\n      // Update shot count\n      setShotsLeft(shotsLeft - 1);\n    }\n  };\n  /**\n   * Method that will move the cannon with the mouse position\n   */\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n  const resetgameRandom = () => {\n    // Reset ball state\n    ballRef.current = {\n      x: 200,\n      y: 50,\n      dx: 0,\n      dy: 0,\n      radius: 10,\n      launched: false\n    };\n\n    // Reset pegs\n    const pegGeneration = Math.floor(Math.random() * 5);\n    let pegGenShape;\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = generatePegsGrid();\n        break;\n      default:\n        pegGenShape = generatePegsRandomly();\n    }\n    pegs.current = pegGenShape;\n\n    // Reset game state\n    setShotsLeft(MAX_SHOTS);\n    setGameMessage(\"\");\n  };\n\n  /**\n   * Return the canvas, game message, and the button to start a new game\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [isGameDone === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"shotsLeft\",\n      children: [\"Shots Left: \", shotsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 34\n    }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"gameMessage\",\n      children: gameMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      className: \"border\",\n      onClick: launchBall,\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this), isGameDone === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"score\",\n      children: currentScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"newGameButtonRandom\",\n      onClick: resetgameRandom,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\",\n        fontSize: \"16px\"\n      },\n      children: \"Start a random new game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 9\n  }, this);\n}\n_s(PiggleGame, \"fXc4k1w3xnJXKRHQ/E7WFbFlsM4=\");\n_c = PiggleGame;\nvar _c;\n$RefreshReg$(_c, \"PiggleGame\");","map":{"version":3,"names":["useEffect","useRef","useState","pegUtils","PigCannon","piggleBall","pegHitSound","jsxDEV","_jsxDEV","PiggleGame","_s","canvasRef","CANVAS_HEIGHT","CANVAS_WIDTH","BALL_GRAVITY","MAX_SHOTS","cannonImage","Image","piggleImage","playPegHitSound","pitch","audioContext","window","AudioContext","webkitAudioContext","source","createBufferSource","fetch","then","response","arrayBuffer","data","decodeAudioData","buffer","playbackRate","value","connect","destination","start","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","currentScore","setCurrentScore","pegsHitThisShot","setPegsHitThisShot","gameMessage","setGameMessage","isGameDone","setIsGameDone","pegs","prevScore","console","log","prev","pegGeneration","Math","floor","random","pegGenShape","generatePegsRandomly","generatePegsCircular","generatePegsHexagonal","generatePegsTriangular","generatePegsGrid","current","canvas","ctx","getContext","animationFrameId","src","drawCannon","save","translate","rotate","PI","cannonWidth","cannonHeight","drawImage","restore","drawBall","ballSize","drawPegs","length","forEach","peg","hit","beginPath","arc","fillStyle","fill","closePath","handleCollisions","hitCount","distance","sqrt","normalX","normalY","dotProduct","updateBall","ball","width","height","checkGameStatus","every","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","cos","sin","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","resetgameRandom","style","textAlign","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onClick","onMouseMove","marginTop","padding","fontSize","_c","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\nimport * as pegUtils from \"./PegUtils.js\";\n\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n    /* Canvas size constants */\n    const CANVAS_HEIGHT = 500;\n    const CANVAS_WIDTH = 400;\n\n    /* Constants for game mechanics */\n    const BALL_GRAVITY = 0.025;\n    const MAX_SHOTS = 10;\n\n    /* Constants for game sprites */\n    const cannonImage = useRef(new Image());\n    const piggleImage = useRef(new Image());\n\n    // For audio\n    // API call to handle peg sound     \n    const playPegHitSound = (pitch) => {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const source = audioContext.createBufferSource();\n        \n        fetch(pegHitSound) \n            .then(response => response.arrayBuffer())\n            .then(data => audioContext.decodeAudioData(data))\n            .then(buffer => {\n                source.buffer = buffer;\n                source.playbackRate.value = pitch;\n                source.connect(audioContext.destination);\n                source.start(0);\n            });\n    };\n\n    // Ball state variables\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    // Current score variable\n    // (PROPOSED SCORE EQUATION) currentScore + (numberOfPegsHitThisShot * 100)\n    const [currentScore, setCurrentScore] = useState(0);\n    const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n    // State for game win or lose\n    const [gameMessage, setGameMessage] = useState(\"\");\n    // State for game finished (0 for no, 1 for yes)\n    const [isGameDone, setIsGameDone] = useState(0);\n\n    // Peg generation logic inside useEffect\n    const pegs = useRef([]);\n\n    /**\n    * This will update the score for every peg hit\n    */\n    useEffect(() => {\n        if (pegsHitThisShot > 0) {\n            // Correctly update score based on latest pegsHitThisShot\n            setCurrentScore(prevScore => prevScore + (pegsHitThisShot * 100));\n            // Play peg sounds\n            playPegHitSound(0.9 + (pegsHitThisShot * 0.1));\n            console.log(currentScore);\n            console.log(\"pitch = \" + (0.9 + (pegsHitThisShot * 0.1)));  \n            // Reset after score updates\n            setPegsHitThisShot(prev => prev++);\n        }\n    }, [pegsHitThisShot]);\n\n\n    useEffect(() => {\n        // Randomize the pegs every time\n        const pegGeneration = Math.floor(Math.random() * 5);  // Correct random generation\n\n        let pegGenShape;\n        // Generate the pegs based on the result of the random variable\n        switch (pegGeneration) {\n            case 0:\n                pegGenShape = pegUtils.generatePegsRandomly();\n                break;\n            case 1:\n                pegGenShape = pegUtils.generatePegsCircular();\n                break;\n            case 2:\n                pegGenShape = pegUtils.generatePegsHexagonal();\n                break;\n            case 3:\n                pegGenShape = pegUtils.generatePegsTriangular();\n                break;\n            case 4:\n                pegGenShape = pegUtils.generatePegsGrid();\n                break;\n            default:\n                pegGenShape = pegUtils.generatePegsRandomly();\n        }\n        // Set pegs after generation\n        pegs.current = pegGenShape;\n    }, []);\n\n    // Game loop\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n\n        // To load the images for sprites\n        cannonImage.current.src = PigCannon;\n        piggleImage.current.src = piggleBall;\n\n\n        /**\n         * Method to generate the cannon\n         */\n        const drawCannon = () => {\n            ctx.save();\n            // Move pivot point to the cannon base\n            ctx.translate(200, 50);\n            // Offset the cannon angle by pi/2 to align barrel with mouse position\n            ctx.rotate(cannonAngle - (Math.PI / 2));\n            // Cannon default size\n            const cannonWidth = 40;\n            const cannonHeight = 80;\n            // Generate cannon with position and size\n            ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n            ctx.restore();\n        };\n\n        /**\n        * Method to generate the current ball\n        */\n        const drawBall = () => {\n            var ballSize = 2.5\n            // Draw the pig sprite\n            if (ballRef.current.launched) {\n                ctx.drawImage(\n                    // The image reference\n                    piggleImage.current,\n                    // x position of the ball\n                    ballRef.current.x - ballRef.current.radius,\n                    // y position of the ball\n                    ballRef.current.y - ballRef.current.radius,\n                    ballRef.current.radius * ballSize,\n                    ballRef.current.radius * ballSize\n                );\n            }\n        };\n\n        /**\n         * Method to generate the pegs\n         */\n        const drawPegs = () => {\n            if (pegs.current.length > 0) {\n                pegs.current.forEach(peg => {\n                    if (!peg.hit) {\n                        ctx.beginPath();\n                        ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n                        ctx.fillStyle = \"blue\";\n                        ctx.fill();\n                        ctx.closePath();\n                    }\n                });\n            }\n        };\n\n        /**\n         * Logic to handle peg collisions\n         */\n        const handleCollisions = () => {\n            let hitCount = 0;\n            // Checks each peg if it was hit\n            pegs.current.forEach(peg => {\n                // Ignore if peg is hit\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                // Calculate if peg was hit\n                if (distance < ballRef.current.radius + peg.radius) {\n                    // Get the direction of the collision by dividing with the distance\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    // Get the ball speed value by taking the dot product\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n\n                    // Mark the peg as hit\n                    peg.hit = true;\n\n                    hitCount++;\n                \n                }\n                \n            });\n\n            setPegsHitThisShot(prev => prev + hitCount);\n        };\n\n        /**\n         * Update the ball position\n         */\n        const updateBall = () => {\n            let ball = ballRef.current;\n            // For ball launch logic\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                // For ball hitting walls (flip x speed)\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n                    ball.dx *= -1;\n                }\n\n                // For ball hitting ceiling (flip y speed)\n                if (ball.y + ball.radius < 0) {\n                    ball.dy *= -1;\n                }\n\n                // If ball goes out of bounds on the bottom of the screen\n                if (ball.y + ball.radius > canvas.height) {\n                    // Reset Ball position\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                // Handle Peg collisons\n                handleCollisions();\n            }\n        };\n\n        /**\n         * Check if game is won\n         */\n        const checkGameStatus = () => {\n            if (pegs.current.every(peg => peg.hit)) {\n                // Add 500 points for every shot not used\n                setGameMessage(\"You Win! Score = \" + (currentScore + (shotsLeft * 500)));\n                setIsGameDone(1);\n            } else if (shotsLeft <= 0) {\n                setGameMessage(\"You Lose!\");\n            }\n        };\n\n        /**\n         * Draw all of the elements on the canvas\n         */\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft, currentScore]);\n\n    const launchBall = () => {\n        // Ball will not launch is over or if there's no shots left\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            // Reset pegs hit\n            setPegsHitThisShot(0);\n            // Update shot count\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n    /**\n     * Method that will move the cannon with the mouse position\n     */\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n\n    const resetgameRandom = () => {\n        // Reset ball state\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        // Reset pegs\n        const pegGeneration = Math.floor(Math.random() * 5);\n        let pegGenShape;\n        switch (pegGeneration) {\n            case 0: pegGenShape = generatePegsRandomly(); break;\n            case 1: pegGenShape = generatePegsCircular(); break;\n            case 2: pegGenShape = generatePegsHexagonal(); break;\n            case 3: pegGenShape = generatePegsTriangular(); break;\n            case 4: pegGenShape = generatePegsGrid(); break;\n            default: pegGenShape = generatePegsRandomly();\n        }\n        pegs.current = pegGenShape;\n\n        // Reset game state\n        setShotsLeft(MAX_SHOTS);\n        setGameMessage(\"\");\n    };\n\n    /**\n     * Return the canvas, game message, and the button to start a new game\n     */\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            {isGameDone === 0 && <p id=\"shotsLeft\">Shots Left: {shotsLeft}</p>}\n            {gameMessage && <h2 id=\"gameMessage\">{gameMessage}</h2>}\n            <canvas\n                ref={canvasRef}\n                width={CANVAS_WIDTH}\n                height={CANVAS_HEIGHT}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n            {isGameDone === 0 && <p id=\"score\">{currentScore}</p>}\n            <button id=\"newGameButtonRandom\" onClick={resetgameRandom} style={{ marginTop: \"10px\", padding: \"10px\", fontSize: \"16px\" }}>\n                Start a random new game!\n            </button>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */import{useEffect,useRef,useState}from\"react\";/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";export default function PiggleGame(){// Reference to canvas element\nconst canvasRef=useRef(null);// Constants for game mechanics gravity and max shots\nconst BALL_GRAVITY=0.03;const MAX_SHOTS=10;const NUMBER_OF_PEGS=20;// Ball state variables\nconst ballRef=useRef({x:200,y:50,dx:0,dy:0,radius:10,launched:false});// State for cannon angle\nconst[cannonAngle,setCannonAngle]=useState(0);// State for remaining shots\nconst[shotsLeft,setShotsLeft]=useState(MAX_SHOTS);const[gameMessage,setGameMessage]=useState(\"\");/**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */const generatePegsRandomly=()=>Array.from({length:NUMBER_OF_PEGS},()=>({x:Math.random()*380+10,y:Math.random()*300+100,radius:10,hit:false}));/**\n     * This method will generate the pegs in a square grid\n     * @returns The pegs in a grid\n     */const generatePegsGrid=()=>{// Rows and column number\nconst rows=5;const cols=5;// Peg spacing\nconst spacing=50;// Starting position for the top left peg\nconst startX=100;const startY=170;// Generate the pegs\nlet pegs=[];for(let row=0;row<rows;row++){for(let col=0;col<cols;col++){pegs.push({x:startX+col*spacing,y:startY+row*spacing,radius:10,hit:false});}}return pegs;};/**\n     * Generate pegs in a circular shape\n     * @returns The pegs in a circle\n     */const generatePegsCircular=()=>{const centerX=200;const centerY=300;const radius=100;const angleIncrement=2*Math.PI/NUMBER_OF_PEGS;let pegs=[];for(let i=0;i<NUMBER_OF_PEGS;i++){const angle=angleIncrement*i;pegs.push({x:centerX+radius*Math.cos(angle),y:centerY+radius*Math.sin(angle),radius:10,hit:false});}return pegs;};const generatePegsHexagonal=()=>{let pegs=[];const rows=4;const cols=4;const spacing=60;for(let row=0;row<rows;row++){for(let col=0;col<cols;col++){const offsetX=row%2===0?0:spacing/2;pegs.push({x:100+(col*spacing+offsetX),y:200+row*spacing*Math.sqrt(3)/2,radius:10,hit:false});}}return pegs;};/**\n     * Generate the pegs in a triangular shape\n     * @returns The pegs in a triangle shape\n     */const generatePegsTriangular=()=>{let pegs=[];const rows=5;for(let row=0;row<rows;row++){for(let col=0;col<=row;col++){const x=50+col*40;const y=100+row*40;pegs.push({x:x,y:y,radius:10,hit:false});}}return pegs;};// Peg generation logic inside useEffect\nconst pegs=useRef([]);useEffect(()=>{// Randomize the pegs every time\nconst pegGeneration=Math.floor(Math.random()*5);// Correct random generation\nlet pegGenShape;switch(pegGeneration){case 0:pegGenShape=generatePegsRandomly();break;case 1:pegGenShape=generatePegsCircular();break;case 2:pegGenShape=generatePegsHexagonal();break;case 3:pegGenShape=generatePegsTriangular();break;case 4:pegGenShape=generatePegsGrid();break;default:pegGenShape=generatePegsRandomly();}pegs.current=pegGenShape;// Set pegs after generation\n},[]);// Game loop\nuseEffect(()=>{const canvas=canvasRef.current;const ctx=canvas.getContext(\"2d\");let animationFrameId;/**\n         * Method to generate the cannon\n         */const drawCannon=()=>{ctx.save();ctx.translate(200,50);ctx.rotate(cannonAngle);ctx.fillStyle=\"black\";ctx.fillRect(-10,-10,30,20);ctx.restore();};/** \n         * Method to generate current ball\n         */const drawBall=()=>{ctx.beginPath();ctx.arc(ballRef.current.x,ballRef.current.y,ballRef.current.radius,0,Math.PI*2);ctx.fillStyle=\"purple\";ctx.fill();ctx.closePath();};/**\n         * Method to generate the pegs\n         */const drawPegs=()=>{if(pegs.current.length>0){pegs.current.forEach(peg=>{if(!peg.hit){ctx.beginPath();ctx.arc(peg.x,peg.y,peg.radius,0,Math.PI*2);ctx.fillStyle=\"blue\";ctx.fill();ctx.closePath();}});}};/**\n         * Logic to handle game collisions\n         */const handleCollisions=()=>{// Checks peg if it was hit\npegs.current.forEach(peg=>{if(peg.hit)return;const dx=ballRef.current.x-peg.x;const dy=ballRef.current.y-peg.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<ballRef.current.radius+peg.radius){const normalX=dx/distance;const normalY=dy/distance;const dotProduct=ballRef.current.dx*normalX+ballRef.current.dy*normalY;ballRef.current.dx-=2*dotProduct*normalX;ballRef.current.dy-=2*dotProduct*normalY;peg.hit=true;}});};/**\n         * Update the ball position\n         */const updateBall=()=>{let ball=ballRef.current;if(ball.launched){ball.dy+=BALL_GRAVITY;ball.x+=ball.dx;ball.y+=ball.dy;if(ball.x-ball.radius<0||ball.x+ball.radius>canvas.width||ball.y+ball.radius<=0){ball.dx*=-1;}if(ball.y+ball.radius>canvas.height){ball.launched=false;ball.x=200;ball.y=50;ball.dx=0;ball.dy=0;checkGameStatus();}handleCollisions();}};/**\n         * Check if game is won\n         */const checkGameStatus=()=>{if(pegs.current.every(peg=>peg.hit)){setGameMessage(\"You Win!\");}else if(shotsLeft<=0){setGameMessage(\"You Lose!\");}};/**\n         * Draw all of the elements on the canvas\n         */const animate=()=>{ctx.clearRect(0,0,canvas.width,canvas.height);drawCannon();drawPegs();drawBall();updateBall();animationFrameId=requestAnimationFrame(animate);};animate();return()=>cancelAnimationFrame(animationFrameId);},[cannonAngle,shotsLeft]);const launchBall=()=>{// Ball will not launch is over or if there's no shots left\nif(!ballRef.current.launched&&shotsLeft>0&&gameMessage===\"\"){ballRef.current.dx=Math.cos(cannonAngle)*3;ballRef.current.dy=Math.sin(cannonAngle)*2;ballRef.current.launched=true;// Update shot count\nsetShotsLeft(shotsLeft-1);}};/**\n     * Method that will move the cannon with the mouse position\n     * @param {*} event \n     */const handleMouseMove=event=>{const canvas=canvasRef.current;const rect=canvas.getBoundingClientRect();const mouseX=event.clientX-rect.left;const mouseY=event.clientY-rect.top;setCannonAngle(Math.atan2(mouseY-50,mouseX-200));};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:\"center\"},children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Shots Left: \",shotsLeft]}),gameMessage&&/*#__PURE__*/_jsx(\"h2\",{children:gameMessage}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:400,height:500,className:\"border\",onClick:launchBall,onMouseMove:handleMouseMove})]});}","map":{"version":3,"names":["useEffect","useRef","useState","jsxs","_jsxs","jsx","_jsx","PiggleGame","canvasRef","BALL_GRAVITY","MAX_SHOTS","NUMBER_OF_PEGS","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","gameMessage","setGameMessage","generatePegsRandomly","Array","from","length","Math","random","hit","generatePegsGrid","rows","cols","spacing","startX","startY","pegs","row","col","push","generatePegsCircular","centerX","centerY","angleIncrement","PI","i","angle","cos","sin","generatePegsHexagonal","offsetX","sqrt","generatePegsTriangular","pegGeneration","floor","pegGenShape","current","canvas","ctx","getContext","animationFrameId","drawCannon","save","translate","rotate","fillStyle","fillRect","restore","drawBall","beginPath","arc","fill","closePath","drawPegs","forEach","peg","handleCollisions","distance","normalX","normalY","dotProduct","updateBall","ball","width","height","checkGameStatus","every","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","style","textAlign","children","ref","className","onClick","onMouseMove"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n\n    // Constants for game mechanics gravity and max shots\n    const BALL_GRAVITY = 0.03;\n    const MAX_SHOTS = 10;\n    const NUMBER_OF_PEGS = 20;\n\n    // Ball state variables\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    const [gameMessage, setGameMessage] = useState(\"\");\n\n    /**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\n    const generatePegsRandomly = () => (\n        Array.from({ length: NUMBER_OF_PEGS }, () => ({\n            x: Math.random() * 380 + 10,\n            y: Math.random() * 300 + 100,\n            radius: 10,\n            hit: false\n        }))\n    );\n\n    /**\n     * This method will generate the pegs in a square grid\n     * @returns The pegs in a grid\n     */\n    const generatePegsGrid = () => {\n        // Rows and column number\n        const rows = 5;\n        const cols = 5;\n        // Peg spacing\n        const spacing = 50;\n        // Starting position for the top left peg\n        const startX = 100;\n        const startY = 170;\n\n        // Generate the pegs\n        let pegs = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                pegs.push({\n                    x: startX + col * spacing,\n                    y: startY + row * spacing,\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    /**\n     * Generate pegs in a circular shape\n     * @returns The pegs in a circle\n     */\n    const generatePegsCircular = () => {\n        const centerX = 200;\n        const centerY = 300;\n        const radius = 100;\n        const angleIncrement = (2 * Math.PI) / NUMBER_OF_PEGS;\n        let pegs = [];\n\n        for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n            const angle = angleIncrement * i;\n            pegs.push({\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle),\n                radius: 10,\n                hit: false\n            });\n        }\n        return pegs;\n    };\n\n    const generatePegsHexagonal = () => {\n        let pegs = [];\n        const rows = 4;\n        const cols = 4;\n        const spacing = 60;\n\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                const offsetX = (row % 2 === 0) ? 0 : spacing / 2;\n                pegs.push({\n                    x: 100 + (col * spacing + offsetX),\n                    y: 200 + (row * spacing * Math.sqrt(3) / 2),\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    /**\n     * Generate the pegs in a triangular shape\n     * @returns The pegs in a triangle shape\n     */\n    const generatePegsTriangular = () => {\n        let pegs = [];\n        const rows = 5;\n\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col <= row; col++) {\n                const x = 50 + col * 40;\n                const y = 100 + row * 40;\n                pegs.push({\n                    x: x,\n                    y: y,\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    // Peg generation logic inside useEffect\n    const pegs = useRef([]);\n\n    useEffect(() => {\n        // Randomize the pegs every time\n        const pegGeneration = Math.floor(Math.random() * 5);  // Correct random generation\n\n        let pegGenShape;\n        switch (pegGeneration) {\n            case 0:\n                pegGenShape = generatePegsRandomly();\n                break;\n            case 1:\n                pegGenShape = generatePegsCircular();\n                break;\n            case 2:\n                pegGenShape = generatePegsHexagonal();\n                break;\n            case 3:\n                pegGenShape = generatePegsTriangular();\n                break;\n            case 4:\n                pegGenShape = generatePegsGrid();\n                break;\n            default:\n                pegGenShape = generatePegsRandomly();\n        }\n\n        pegs.current = pegGenShape;  // Set pegs after generation\n    }, []);\n\n    // Game loop\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n        \n        /**\n         * Method to generate the cannon\n         */\n        const drawCannon = () => {\n            ctx.save();\n            ctx.translate(200, 50);\n            ctx.rotate(cannonAngle);\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(-10, -10, 30, 20);\n            ctx.restore();\n        };\n\n        /** \n         * Method to generate current ball\n         */\n        const drawBall = () => {\n            ctx.beginPath();\n            ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"purple\";\n            ctx.fill();\n            ctx.closePath();\n        };\n\n        /**\n         * Method to generate the pegs\n         */\n        const drawPegs = () => {\n            if (pegs.current.length > 0) {\n                pegs.current.forEach(peg => {\n                    if (!peg.hit) {\n                        ctx.beginPath();\n                        ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n                        ctx.fillStyle = \"blue\";\n                        ctx.fill();\n                        ctx.closePath();\n                    }\n                });\n            }\n        };\n\n        /**\n         * Logic to handle game collisions\n         */\n        const handleCollisions = () => {\n            // Checks peg if it was hit\n            pegs.current.forEach(peg => {\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n\n                if (distance < ballRef.current.radius + peg.radius) {\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n                    peg.hit = true;\n                }\n            });\n        };\n\n        /**\n         * Update the ball position\n         */\n        const updateBall = () => {\n            let ball = ballRef.current;\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width || ball.y + ball.radius <= 0) {\n                    ball.dx *= -1;\n                }\n\n                if (ball.y + ball.radius > canvas.height) {\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                handleCollisions();\n            }\n        };\n        \n        /**\n         * Check if game is won\n         */\n        const checkGameStatus = () => {\n            if (pegs.current.every(peg => peg.hit)) {\n                setGameMessage(\"You Win!\");\n            } else if (shotsLeft <= 0) {\n                setGameMessage(\"You Lose!\");\n            }\n        };\n        \n        /**\n         * Draw all of the elements on the canvas\n         */\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft]);\n\n    const launchBall = () => {\n        // Ball will not launch is over or if there's no shots left\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            // Update shot count\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n    /**\n     * Method that will move the cannon with the mouse position\n     * @param {*} event \n     */\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            <p>Shots Left: {shotsLeft}</p>\n            {gameMessage && <h2>{gameMessage}</h2>}\n            <canvas\n                ref={canvasRef}\n                width={400}\n                height={500}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n\n/**\n * This method will generate level 1\n */\nconst LevelOne = () => {\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const rows = 7;\n  const cols = 7;\n  const spacing = 50;\n  const startX = 80;\n  const startY = 170;\n  let pegs = [];\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      let pegType = \"blue\";\n\n      // Ensure red pegs don't exceed blue pegs\n      if (Math.random() < 0.3 && redPegCount < bluePegCount / 2) {\n        pegType = \"red\";\n        redPegCount++;\n      }\n      bluePegCount++; // Increment blue peg count regardless\n\n      pegs.push({\n        x: startX + col * spacing,\n        y: startY + row * spacing,\n        radius: typeof PEG_RADIUS !== \"undefined\" ? PEG_RADIUS : 10,\n        // Default radius if undefined\n        hit: false,\n        type: pegType\n      });\n    }\n  }\n  return pegs;\n};\n\n/**\n * This method will generate level 2\n */\n_c = LevelOne;\nconst LevelTwo = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n\n  // Define center of the X\n  const centerX = 200;\n  const centerY = 300;\n\n  // X dimensions\n  const armLength = 150;\n  const pegSpacing = 25;\n\n  // Generate diagonal lines\n  for (let i = -armLength; i <= armLength; i += pegSpacing) {\n    let pegType = \"blue\";\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n\n    // First diagonal (TL to BR)\n    pegs.push({\n      x: centerX + i,\n      y: centerY + i,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n\n    // Second diagonal (TR to BL)\n    pegs.push({\n      x: centerX + i,\n      y: centerY - i,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  return pegs;\n};\n\n/**\n * This method will generate level 3\n * Smiley face :)\n */\n_c2 = LevelTwo;\nconst LevelThree = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n\n  // Define center of smiley face\n  const centerX = 200;\n  const centerY = 300;\n\n  // Eye positions\n  const eyeRadius = 30;\n  const leftEyeX = centerX - 70;\n  const rightEyeX = centerX + 70;\n  const eyeY = centerY - 60;\n\n  // Generate eye pegs\n  const eyePegCount = 8;\n  for (let i = 0; i < eyePegCount; i++) {\n    let pegType = \"blue\";\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    // Push pegs\n    let angle = Math.PI * 2 * i / eyePegCount;\n    pegs.push({\n      x: leftEyeX + eyeRadius * Math.cos(angle),\n      y: eyeY + eyeRadius * Math.sin(angle),\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n    pegs.push({\n      x: rightEyeX + eyeRadius * Math.cos(angle),\n      y: eyeY + eyeRadius * Math.sin(angle),\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n\n  // Generate mouth pegs\n  const mouthRadius = 90;\n  const mouthY = centerY + 30;\n  const mouthPegCount = 9;\n  for (let i = 0; i < mouthPegCount; i++) {\n    let pegType = \"blue\";\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    // Push pegs\n    let angle = Math.PI * (0.2 + i / mouthPegCount * 0.6); // Restrict to bottom half\n    pegs.push({\n      x: centerX + mouthRadius * Math.cos(angle),\n      y: mouthY + mouthRadius * Math.sin(angle),\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n\n  // Create outer face pegs\n  const faceRadius = 150;\n  const facePegCount = 20;\n  for (let i = 0; i < facePegCount; i++) {\n    let pegType = \"blue\";\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    // Push pegs\n    let angle = Math.PI * 2 * i / facePegCount;\n    pegs.push({\n      x: centerX + faceRadius * Math.cos(angle),\n      y: centerY + faceRadius * Math.sin(angle),\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  return pegs;\n};\n_c3 = LevelThree;\nexport { LevelOne, LevelTwo, LevelThree };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LevelOne\");\n$RefreshReg$(_c2, \"LevelTwo\");\n$RefreshReg$(_c3, \"LevelThree\");","map":{"version":3,"names":["NUMBER_OF_PEGS","PEG_RADIUS","LevelOne","redPegCount","bluePegCount","rows","cols","spacing","startX","startY","pegs","row","col","pegType","Math","random","push","x","y","radius","hit","type","_c","LevelTwo","centerX","centerY","armLength","pegSpacing","i","_c2","LevelThree","eyeRadius","leftEyeX","rightEyeX","eyeY","eyePegCount","angle","PI","cos","sin","mouthRadius","mouthY","mouthPegCount","faceRadius","facePegCount","_c3","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/Levels.js"],"sourcesContent":["let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n\n/**\n * This method will generate level 1\n */\nconst LevelOne = () => {\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    \n    const rows = 7;\n    const cols = 7;\n    const spacing = 50;\n    const startX = 80;\n    const startY = 170;\n\n    let pegs = [];\n\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            let pegType = \"blue\";\n\n            // Ensure red pegs don't exceed blue pegs\n            if (Math.random() < 0.3 && redPegCount < (bluePegCount / 2)) {\n                pegType = \"red\";\n                redPegCount++;\n            }\n            bluePegCount++; // Increment blue peg count regardless\n\n            pegs.push({\n                x: startX + col * spacing,\n                y: startY + row * spacing,\n                radius: typeof PEG_RADIUS !== \"undefined\" ? PEG_RADIUS : 10, // Default radius if undefined\n                hit: false,\n                type: pegType\n            });\n        }\n    }\n\n    return pegs;\n};\n\n\n/**\n * This method will generate level 2\n */\nconst LevelTwo = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n\n    // Define center of the X\n    const centerX = 200;\n    const centerY = 300;\n    \n    // X dimensions\n    const armLength = 150;\n    const pegSpacing = 25;\n\n    // Generate diagonal lines\n    for (let i = -armLength; i <= armLength; i += pegSpacing) {\n        let pegType = \"blue\";\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n        \n        // First diagonal (TL to BR)\n        pegs.push({ x: centerX + i, y: centerY + i, radius: PEG_RADIUS, hit: false, type: pegType });\n\n        // Second diagonal (TR to BL)\n        pegs.push({ x: centerX + i, y: centerY - i, radius: PEG_RADIUS, hit: false, type: pegType });\n    }\n\n    return pegs;\n};\n\n\n/**\n * This method will generate level 3\n * Smiley face :)\n */\nconst LevelThree = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n\n    // Define center of smiley face\n    const centerX = 200;\n    const centerY = 300;\n    \n    // Eye positions\n    const eyeRadius = 30;\n    const leftEyeX = centerX - 70;\n    const rightEyeX = centerX + 70;\n    const eyeY = centerY - 60;\n\n    // Generate eye pegs\n    const eyePegCount = 8;\n    for (let i = 0; i < eyePegCount; i++) {\n        let pegType = \"blue\";\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n        // Push pegs\n        let angle = (Math.PI * 2 * i) / eyePegCount;\n        pegs.push({ x: leftEyeX + eyeRadius * Math.cos(angle), y: eyeY + eyeRadius * Math.sin(angle), radius: PEG_RADIUS, hit: false, type: pegType });\n        pegs.push({ x: rightEyeX + eyeRadius * Math.cos(angle), y: eyeY + eyeRadius * Math.sin(angle), radius: PEG_RADIUS, hit: false, type: pegType });\n    }\n\n    // Generate mouth pegs\n    const mouthRadius = 90;\n    const mouthY = centerY + 30;\n    const mouthPegCount = 9;\n    for (let i = 0; i < mouthPegCount; i++) {\n        let pegType = \"blue\";\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n        // Push pegs\n        let angle = Math.PI * (0.2 + (i / mouthPegCount) * 0.6); // Restrict to bottom half\n        pegs.push({ x: centerX + mouthRadius * Math.cos(angle), y: mouthY + mouthRadius * Math.sin(angle), radius: PEG_RADIUS, hit: false, type: pegType });\n    }\n\n    // Create outer face pegs\n    const faceRadius = 150;\n    const facePegCount = 20; \n    for (let i = 0; i < facePegCount; i++) {\n        let pegType = \"blue\";\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n        // Push pegs\n        let angle = (Math.PI * 2 * i) / facePegCount;\n        pegs.push({ x: centerX + faceRadius * Math.cos(angle), y: centerY + faceRadius * Math.sin(angle), radius: PEG_RADIUS, hit: false, type: pegType });\n    }\n\n    \n\n    return pegs;\n};\n\n\n\n\nexport { \n    LevelOne,\n    LevelTwo,\n    LevelThree\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
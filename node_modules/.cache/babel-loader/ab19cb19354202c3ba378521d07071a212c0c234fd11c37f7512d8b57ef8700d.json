{"ast":null,"code":"let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelOne = () => {\n  /**\n   * This method will generate the pegs in a square grid\n   * @returns The pegs in a grid\n   */\n  const generatePegsGrid = () => {\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    // Rows and column number\n    const rows = 5;\n    const cols = 5;\n    // Peg spacing\n    const spacing = 50;\n    // Starting position for the top left peg\n    const startX = 100;\n    const startY = 170;\n\n    // Generate the pegs\n    let pegs = [];\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        let pegType = \"blue\";\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n          pegType = \"red\";\n          redPegCount++;\n        } else {\n          bluePegCount++;\n        }\n        pegs.push({\n          x: startX + col * spacing,\n          y: startY + row * spacing,\n          radius: PEG_RADIUS,\n          hit: false,\n          type: pegType\n        });\n      }\n    }\n    return pegs;\n  };\n};\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\n_c = LevelOne;\nconst LevelTwo = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const totalPegs = NUMBER_OF_PEGS;\n  for (let i = 0; i < totalPegs; i++) {\n    let pegType = \"blue\";\n\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    pegs.push({\n      x: Math.random() * 380 + 10,\n      y: Math.random() * 300 + 100,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  ;\n  return pegs;\n};\n\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\n_c2 = LevelTwo;\nconst LevelThree = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const totalPegs = NUMBER_OF_PEGS;\n  for (let i = 0; i < totalPegs; i++) {\n    let pegType = \"blue\";\n\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    pegs.push({\n      x: Math.random() * 380 + 10,\n      y: Math.random() * 300 + 100,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  ;\n  return pegs;\n};\n_c3 = LevelThree;\nexport { LevelOne, LevelTwo, LevelThree };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LevelOne\");\n$RefreshReg$(_c2, \"LevelTwo\");\n$RefreshReg$(_c3, \"LevelThree\");","map":{"version":3,"names":["NUMBER_OF_PEGS","PEG_RADIUS","LevelOne","generatePegsGrid","redPegCount","bluePegCount","rows","cols","spacing","startX","startY","pegs","row","col","pegType","Math","random","push","x","y","radius","hit","type","_c","LevelTwo","totalPegs","i","_c2","LevelThree","_c3","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/Levels.js"],"sourcesContent":["let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelOne = () => {\n    /**\n     * This method will generate the pegs in a square grid\n     * @returns The pegs in a grid\n     */\n    const generatePegsGrid = () => {\n        let redPegCount = 0;\n        let bluePegCount = 0;\n        // Rows and column number\n        const rows = 5;\n        const cols = 5;\n        // Peg spacing\n        const spacing = 50;\n        // Starting position for the top left peg\n        const startX = 100;\n        const startY = 170;\n    \n        // Generate the pegs\n        let pegs = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                let pegType = \"blue\";\n                // Ensure red pegs don't exceed blue pegs\n                if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n                    pegType = \"red\";\n                    redPegCount++;\n                } else {\n                    bluePegCount++;\n                }\n                pegs.push({\n                    x: startX + col * spacing,\n                    y: startY + row * spacing,\n                    radius: PEG_RADIUS,\n                    hit: false,\n                    type: pegType\n                });\n            }\n        }\n        return pegs;\n    };\n}\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelTwo = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n\n/**\n * This method will generate the pegs randomly\n * @returns The pegs generated in a random\n */\nconst LevelThree = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n\n\nexport { \n    LevelOne,\n    LevelTwo,\n    LevelThree\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
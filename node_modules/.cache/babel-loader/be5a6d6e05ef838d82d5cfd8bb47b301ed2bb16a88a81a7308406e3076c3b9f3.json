{"ast":null,"code":"var _jsxFileName = \"/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js\",\n  _s = $RefreshSig$();\n/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n// FOR FIRBASE TESTS\nimport { getFirestore, doc, getDoc, updateDoc, setDoc } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\nimport * as pegUtils from \"./levels/RandomLevels.js\";\nimport * as adventureLevels from \"./levels/AdventureLevels.js\";\n\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PiggleGame() {\n  _s();\n  // Reference to canvas element\n  const canvasRef = useRef(null);\n  /* Canvas size constants */\n  const CANVAS_HEIGHT = 500;\n  const CANVAS_WIDTH = 400;\n\n  /* Constants for game mechanics */\n  const BALL_GRAVITY = 0.025;\n  const MAX_SHOTS = 10;\n\n  /* Constants for game sprites */\n  const cannonImage = useRef(new Image());\n  const piggleImage = useRef(new Image());\n\n  // For audio\n  // API call to handle peg sound     \n  const playPegHitSound = pitch => {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const source = audioContext.createBufferSource();\n    fetch(pegHitSound).then(response => response.arrayBuffer()).then(data => audioContext.decodeAudioData(data)).then(buffer => {\n      source.buffer = buffer;\n      source.playbackRate.value = pitch;\n      source.connect(audioContext.destination);\n      source.start(0);\n    });\n  };\n\n  // Ball state variables\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 9,\n    launched: false\n  });\n\n  // State for cannon angle\n  const [cannonAngle, setCannonAngle] = useState(0);\n  // State for remaining shots\n  const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n  // Current score variable\n  const [currentScore, setCurrentScore] = useState(0);\n  const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n  // State for game win or lose\n  const [gameMessage, setGameMessage] = useState(\"\");\n  // State for game finished (0 for no, 1 for yes)\n  const [isGameDone, setIsGameDone] = useState(0);\n  // State for if game is adventure mode (0 for no, 1 for yes)\n  const [isAdventureMode, setIsAdventureMode] = useState(0);\n  const [currentAdventureModeLevel, setCurrentAdventureModeLevel] = useState(1);\n\n  // Peg generation logic inside useEffect\n  const pegs = useRef([]);\n\n  /**\n  * This will update the score for every peg hit\n  */\n  useEffect(() => {\n    if (pegsHitThisShot > 0) {\n      // Correctly update score based on latest pegsHitThisShot\n      setCurrentScore(prevScore => prevScore + pegsHitThisShot * 100);\n      // Play peg sounds\n      playPegHitSound(0.9 + pegsHitThisShot * 0.1);\n      // Reset after score updates\n      setPegsHitThisShot(prev => prev++);\n    }\n  }, [pegsHitThisShot]);\n  useEffect(() => {\n    // Randomize the pegs every time\n    const pegGeneration = Math.floor(Math.random() * 5);\n    let pegGenShape;\n    // Generate the pegs based on the result of the random variable\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = pegUtils.generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = pegUtils.generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = pegUtils.generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = pegUtils.generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = pegUtils.generatePegsGrid();\n        break;\n      default:\n        pegGenShape = pegUtils.generatePegsRandomly();\n    }\n    // Set pegs after generation\n    pegs.current = pegGenShape;\n  }, []);\n\n  // Game loop\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n\n    // To load the images for sprites\n    cannonImage.current.src = PigCannon;\n    piggleImage.current.src = piggleBall;\n\n    /**\n     * Method to generate the cannon\n     */\n    const drawCannon = () => {\n      ctx.save();\n      // Move pivot point to the cannon base\n      ctx.translate(200, 50);\n      // Offset the cannon angle by pi/2 to align barrel with mouse position\n      ctx.rotate(cannonAngle - Math.PI / 2);\n      // Cannon default size\n      const cannonWidth = 80;\n      const cannonHeight = 80;\n      // Generate cannon with position and size\n      ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n      ctx.restore();\n    };\n\n    /**\n    * Method to generate the current ball\n    */\n    const drawBall = () => {\n      var ballSize = 2.5;\n      // Draw the pig sprite\n      if (ballRef.current.launched) {\n        ctx.drawImage(\n        // The image reference\n        piggleImage.current,\n        // x position of the ball\n        ballRef.current.x - ballRef.current.radius,\n        // y position of the ball\n        ballRef.current.y - ballRef.current.radius, ballRef.current.radius * ballSize, ballRef.current.radius * ballSize);\n      }\n    };\n\n    /**\n     * Method to generate the pegs\n     */\n    const drawPegs = () => {\n      if (pegs.current.length > 0) {\n        pegs.current.forEach(peg => {\n          if (!peg.hit) {\n            ctx.beginPath();\n            // Draw peg\n            ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n\n            // Fill color based on peg type\n            ctx.fillStyle = peg.type === \"red\" ? \"red\" : \"blue\";\n            ctx.fill();\n\n            // Draw peg border\n            ctx.lineWidth = 1.5;\n            ctx.strokeStyle = \"black\";\n            ctx.stroke();\n            ctx.closePath();\n          }\n        });\n      }\n    };\n\n    /**\n     * Logic to handle peg collisions\n     */\n    const handleCollisions = () => {\n      let hitCount = 0;\n      // Checks each peg if it was hit\n      pegs.current.forEach(peg => {\n        // Ignore if peg is hit\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        // Calculate if peg was hit\n        if (distance < ballRef.current.radius + peg.radius) {\n          // Get the direction of the collision by dividing with the distance\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          // Get the ball speed value by taking the dot product\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n          // Mark the peg as hit\n          peg.hit = true;\n          // Update hit count\n          hitCount++;\n        }\n      });\n      setPegsHitThisShot(prev => prev + hitCount);\n    };\n\n    /**\n     * Update the ball position\n     */\n    const updateBall = () => {\n      let ball = ballRef.current;\n      // For ball launch logic\n      if (ball.launched) {\n        ball.dy += BALL_GRAVITY;\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n\n        // For ball hitting walls (flip x speed)\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n          ball.dx *= -1;\n        }\n\n        // For ball hitting ceiling (flip y speed)\n        if (ball.y + ball.radius < 0) {\n          ball.dy *= -1;\n        }\n\n        // If ball goes out of bounds on the bottom of the screen\n        if (ball.y + ball.radius > canvas.height) {\n          // Reset Ball position\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n          checkGameStatus();\n        }\n        // Handle Peg collisons\n        handleCollisions();\n      }\n    };\n\n    // Function to save the user's high score in adventure mode\n    const saveHighScore = async highScore => {\n      const auth = getAuth();\n      const db = getFirestore();\n      const user = auth.currentUser;\n      if (user) {\n        try {\n          const userRef = doc(db, \"users\", user.uid);\n          const docSnap = await getDoc(userRef);\n          if (docSnap.exists()) {\n            // Get High score\n            const currentHighScore = docSnap.data().highscore || 0;\n            if (highScore > currentHighScore) {\n              await updateDoc(userRef, {\n                //Update highscore if new one is higher\n                highscore: highScore\n              });\n              console.log(\"New high score saved!\");\n            } else {\n              console.log(\"High score is not higher, not updating.\");\n            }\n          } else {\n            console.log(\"No user data found, creating document.\");\n            await setDoc(userRef, {\n              highscore: highScore\n            });\n          }\n        } catch (error) {\n          console.error(\"Error saving high score:\", error);\n        }\n      } else {\n        console.log(\"No user is logged in\");\n      }\n    };\n\n    /**\n     * Check if game is won\n     */\n    const checkGameStatus = () => {\n      // For random mode\n      if (!isAdventureMode) {\n        if (pegs.current.every(peg => peg.hit)) {\n          // Add 500 points for every shot not used\n          setGameMessage(\"You Win! Score: \" + (currentScore + shotsLeft * 500));\n          setIsGameDone(1);\n        } else if (shotsLeft <= 0) {\n          setGameMessage(\"You Lose!\");\n          setIsGameDone(1);\n        }\n      }\n      // Condition if game is in adventure mode\n      else {\n        if (pegs.current.filter(peg => peg.type === \"red\").every(peg => peg.hit)) {\n          // Add 500 points for every shot not used\n          setGameMessage(\"You Win! Score: \" + (currentScore + shotsLeft * 500));\n          // Change the current adventure mode level\n          setCurrentAdventureModeLevel(prev => prev + 1);\n          saveHighScore(currentScore);\n          changeAdventureModeLevel();\n        } else if (shotsLeft <= 0) {\n          setGameMessage(\"You Lose!\");\n          setIsGameDone(1);\n          setCurrentAdventureModeLevel(1);\n        }\n      }\n    };\n\n    /**\n     * Draw all of the elements on the canvas\n     */\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle, shotsLeft, currentScore]);\n  const launchBall = () => {\n    // Ball will not launch is over or if there's no shots left\n    if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n      ballRef.current.dx = Math.cos(cannonAngle) * 3;\n      ballRef.current.dy = Math.sin(cannonAngle) * 2;\n      ballRef.current.launched = true;\n      // Reset pegs hit\n      setPegsHitThisShot(0);\n      // Update shot count\n      setShotsLeft(shotsLeft - 1);\n    }\n  };\n  /**\n   * Method that will move the cannon with the mouse position\n   */\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n\n  /**\n   * Reset the game randomly when not in adventure mode\n   */\n  const resetgameRandom = () => {\n    // Reset ball state\n    ballRef.current = {\n      x: 200,\n      y: 50,\n      dx: 0,\n      dy: 0,\n      radius: 10,\n      launched: false\n    };\n\n    // Reset pegs\n    const pegGeneration = Math.floor(Math.random() * 5);\n    let pegGenShape;\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = pegUtils.generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = pegUtils.generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = pegUtils.generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = pegUtils.generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = pegUtils.generatePegsGrid();\n        break;\n      default:\n        pegGenShape = pegUtils.generatePegsRandomly();\n    }\n    pegs.current = pegGenShape;\n    // Reset game state\n    setIsGameDone(0);\n    setIsAdventureMode(0);\n    setShotsLeft(MAX_SHOTS);\n    setCurrentScore(0);\n    setGameMessage(\"\");\n  };\n\n  /**\n   * Start the adventure mode\n   */\n  const startAdventureMode = () => {\n    // Reset ball automatically\n    ballRef.current = {\n      x: 200,\n      y: 50,\n      dx: 0,\n      dy: 0,\n      radius: 10,\n      launched: false\n    };\n    setIsGameDone(0);\n    // Update adventure mode variables\n    setIsAdventureMode(1);\n    setCurrentAdventureModeLevel(1);\n    // Reset everything\n    setShotsLeft(MAX_SHOTS);\n    setCurrentScore(0);\n    setGameMessage(\"\");\n\n    // Start with level 1\n    pegs.current = adventureLevels.LevelOne();\n  };\n  const changeAdventureModeLevel = () => {\n    // Reset ball state\n    ballRef.current = {\n      x: 200,\n      y: 50,\n      dx: 0,\n      dy: 0,\n      radius: 10,\n      launched: false\n    };\n    if (currentAdventureModeLevel < 5) {\n      // Change peg layout based on the new level\n      let newPegLayout;\n      switch (currentAdventureModeLevel + 1) {\n        case 2:\n          newPegLayout = adventureLevels.LevelTwo();\n          break;\n        case 3:\n          newPegLayout = adventureLevels.LevelThree();\n          break;\n        case 4:\n          newPegLayout = adventureLevels.LevelFour();\n          break;\n        case 5:\n          newPegLayout = adventureLevels.LevelFive();\n          break;\n        default:\n          newPegLayout = adventureLevels.LevelOne();\n      }\n      // Update the pegs\n      pegs.current = newPegLayout;\n\n      // Reset game state\n      setShotsLeft(MAX_SHOTS);\n      setGameMessage(\"\");\n    } else {\n      setGameMessage(\"You Win! Score: \" + (currentScore + shotsLeft * 500));\n      setIsAdventureMode(0);\n      setIsGameDone(1);\n    }\n  };\n\n  /**\n   * Return the game elements\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [isAdventureMode === 1 && /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"gameMessage\",\n      children: [\"Adventure Mode Level \", currentAdventureModeLevel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 39\n    }, this), isGameDone === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"shotsLeft\",\n      children: [\"Shots Left: \", shotsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 34\n    }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"gameMessage\",\n      children: gameMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      className: \"border\",\n      onClick: launchBall,\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }, this), isGameDone === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"score\",\n      children: currentScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"adventureModeButton\",\n      onClick: () => {\n        startAdventureMode();\n        window.location.reload();\n      },\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\",\n        fontSize: \"16px\"\n      },\n      children: \"Start Adventure Mode!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"newGameButtonRandom\",\n      onClick: () => {\n        resetgameRandom();\n        window.location.reload();\n      },\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\",\n        fontSize: \"16px\"\n      },\n      children: \"Start a random new game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 9\n  }, this);\n}\n_s(PiggleGame, \"ju7fja6/WWtGGSS0AGMoBRIqxqA=\");\n_c = PiggleGame;\nvar _c;\n$RefreshReg$(_c, \"PiggleGame\");","map":{"version":3,"names":["useEffect","useRef","useState","getFirestore","doc","getDoc","updateDoc","setDoc","getAuth","pegUtils","adventureLevels","PigCannon","piggleBall","pegHitSound","jsxDEV","_jsxDEV","PiggleGame","_s","canvasRef","CANVAS_HEIGHT","CANVAS_WIDTH","BALL_GRAVITY","MAX_SHOTS","cannonImage","Image","piggleImage","playPegHitSound","pitch","audioContext","window","AudioContext","webkitAudioContext","source","createBufferSource","fetch","then","response","arrayBuffer","data","decodeAudioData","buffer","playbackRate","value","connect","destination","start","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","currentScore","setCurrentScore","pegsHitThisShot","setPegsHitThisShot","gameMessage","setGameMessage","isGameDone","setIsGameDone","isAdventureMode","setIsAdventureMode","currentAdventureModeLevel","setCurrentAdventureModeLevel","pegs","prevScore","prev","pegGeneration","Math","floor","random","pegGenShape","generatePegsRandomly","generatePegsCircular","generatePegsHexagonal","generatePegsTriangular","generatePegsGrid","current","canvas","ctx","getContext","animationFrameId","src","drawCannon","save","translate","rotate","PI","cannonWidth","cannonHeight","drawImage","restore","drawBall","ballSize","drawPegs","length","forEach","peg","hit","beginPath","arc","fillStyle","type","fill","lineWidth","strokeStyle","stroke","closePath","handleCollisions","hitCount","distance","sqrt","normalX","normalY","dotProduct","updateBall","ball","width","height","checkGameStatus","saveHighScore","highScore","auth","db","user","currentUser","userRef","uid","docSnap","exists","currentHighScore","highscore","console","log","error","every","filter","changeAdventureModeLevel","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","cos","sin","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","resetgameRandom","startAdventureMode","LevelOne","newPegLayout","LevelTwo","LevelThree","LevelFour","LevelFive","style","textAlign","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onClick","onMouseMove","location","reload","marginTop","padding","fontSize","_c","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n// FOR FIRBASE TESTS\nimport { getFirestore, doc, getDoc, updateDoc, setDoc } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\n\nimport * as pegUtils from \"./levels/RandomLevels.js\";\nimport * as adventureLevels from \"./levels/AdventureLevels.js\";\n\n// Import cannon sprite\nimport PigCannon from \"./GameImages/PigCannon.png\";\nimport piggleBall from \"./GameImages/piggleBall.png\";\n// Import game sounds\nimport pegHitSound from \"./Sounds/pegHitSound.wav\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n    /* Canvas size constants */\n    const CANVAS_HEIGHT = 500;\n    const CANVAS_WIDTH = 400;\n\n    /* Constants for game mechanics */\n    const BALL_GRAVITY = 0.025;\n    const MAX_SHOTS = 10;\n\n    /* Constants for game sprites */\n    const cannonImage = useRef(new Image());\n    const piggleImage = useRef(new Image());\n\n    // For audio\n    // API call to handle peg sound     \n    const playPegHitSound = (pitch) => {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const source = audioContext.createBufferSource();\n        fetch(pegHitSound)\n            .then(response => response.arrayBuffer())\n            .then(data => audioContext.decodeAudioData(data))\n            .then(buffer => {\n                source.buffer = buffer;\n                source.playbackRate.value = pitch;\n                source.connect(audioContext.destination);\n                source.start(0);\n            });\n    };\n\n    // Ball state variables\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 9, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    // Current score variable\n    const [currentScore, setCurrentScore] = useState(0);\n    const [pegsHitThisShot, setPegsHitThisShot] = useState(0);\n    // State for game win or lose\n    const [gameMessage, setGameMessage] = useState(\"\");\n    // State for game finished (0 for no, 1 for yes)\n    const [isGameDone, setIsGameDone] = useState(0);\n    // State for if game is adventure mode (0 for no, 1 for yes)\n    const [isAdventureMode, setIsAdventureMode] = useState(0)\n    const [currentAdventureModeLevel, setCurrentAdventureModeLevel] = useState(1);\n\n    // Peg generation logic inside useEffect\n    const pegs = useRef([]);\n\n    /**\n    * This will update the score for every peg hit\n    */\n    useEffect(() => {\n        if (pegsHitThisShot > 0) {\n            // Correctly update score based on latest pegsHitThisShot\n            setCurrentScore(prevScore => prevScore + (pegsHitThisShot * 100));\n            // Play peg sounds\n            playPegHitSound(0.9 + (pegsHitThisShot * 0.1));\n            // Reset after score updates\n            setPegsHitThisShot(prev => prev++);\n        }\n    }, [pegsHitThisShot]);\n\n\n    useEffect(() => {\n        // Randomize the pegs every time\n        const pegGeneration = Math.floor(Math.random() * 5);  \n\n        let pegGenShape;\n        // Generate the pegs based on the result of the random variable\n        switch (pegGeneration) {\n            case 0:\n                pegGenShape = pegUtils.generatePegsRandomly();\n                break;\n            case 1:\n                pegGenShape = pegUtils.generatePegsCircular();\n                break;\n            case 2:\n                pegGenShape = pegUtils.generatePegsHexagonal();\n                break;\n            case 3:\n                pegGenShape = pegUtils.generatePegsTriangular();\n                break;\n            case 4:\n                pegGenShape = pegUtils.generatePegsGrid();\n                break;\n            default:\n                pegGenShape = pegUtils.generatePegsRandomly();\n        }\n        // Set pegs after generation\n        pegs.current = pegGenShape;\n    }, []);\n\n    // Game loop\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n\n        // To load the images for sprites\n        cannonImage.current.src = PigCannon;\n        piggleImage.current.src = piggleBall;\n\n\n        /**\n         * Method to generate the cannon\n         */\n        const drawCannon = () => {\n            ctx.save();\n            // Move pivot point to the cannon base\n            ctx.translate(200, 50);\n            // Offset the cannon angle by pi/2 to align barrel with mouse position\n            ctx.rotate(cannonAngle - (Math.PI / 2));\n            // Cannon default size\n            const cannonWidth = 80;\n            const cannonHeight = 80;\n            // Generate cannon with position and size\n            ctx.drawImage(cannonImage.current, -(cannonWidth / 2), -(cannonHeight / 3), cannonWidth, cannonHeight);\n            ctx.restore();\n        };\n\n        /**\n        * Method to generate the current ball\n        */\n        const drawBall = () => {\n            var ballSize = 2.5\n            // Draw the pig sprite\n            if (ballRef.current.launched) {\n                ctx.drawImage(\n                    // The image reference\n                    piggleImage.current,\n                    // x position of the ball\n                    ballRef.current.x - ballRef.current.radius,\n                    // y position of the ball\n                    ballRef.current.y - ballRef.current.radius,\n                    ballRef.current.radius * ballSize,\n                    ballRef.current.radius * ballSize\n                );\n            }\n        };\n\n        /**\n         * Method to generate the pegs\n         */\n        const drawPegs = () => {\n            if (pegs.current.length > 0) {\n                pegs.current.forEach(peg => {\n                    if (!peg.hit) {\n                        ctx.beginPath();\n                        // Draw peg\n                        ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n\n                        // Fill color based on peg type\n                        ctx.fillStyle = peg.type === \"red\" ? \"red\" : \"blue\";\n                        ctx.fill();\n\n                        // Draw peg border\n                        ctx.lineWidth = 1.5;\n                        ctx.strokeStyle = \"black\";\n                        ctx.stroke();\n\n                        ctx.closePath();\n                    }\n                });\n            }\n        };\n\n        /**\n         * Logic to handle peg collisions\n         */\n        const handleCollisions = () => {\n            let hitCount = 0;\n            // Checks each peg if it was hit\n            pegs.current.forEach(peg => {\n                // Ignore if peg is hit\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                // Calculate if peg was hit\n                if (distance < ballRef.current.radius + peg.radius) {\n                    // Get the direction of the collision by dividing with the distance\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    // Get the ball speed value by taking the dot product\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n                    // Mark the peg as hit\n                    peg.hit = true;\n                    // Update hit count\n                    hitCount++;\n                }\n\n            });\n\n            setPegsHitThisShot(prev => prev + hitCount);\n        };\n\n        /**\n         * Update the ball position\n         */\n        const updateBall = () => {\n            let ball = ballRef.current;\n            // For ball launch logic\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                // For ball hitting walls (flip x speed)\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {\n                    ball.dx *= -1;\n                }\n\n                // For ball hitting ceiling (flip y speed)\n                if (ball.y + ball.radius < 0) {\n                    ball.dy *= -1;\n                }\n\n                // If ball goes out of bounds on the bottom of the screen\n                if (ball.y + ball.radius > canvas.height) {\n                    // Reset Ball position\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                // Handle Peg collisons\n                handleCollisions();\n            }\n        };\n\n        // Function to save the user's high score in adventure mode\n        const saveHighScore = async (highScore) => {\n            const auth = getAuth();\n            const db = getFirestore();\n            const user = auth.currentUser;\n          \n            if (user) {\n              try {\n                const userRef = doc(db, \"users\", user.uid); \n                const docSnap = await getDoc(userRef); \n          \n                if (docSnap.exists()) {\n                  // Get High score\n                  const currentHighScore = docSnap.data().highscore || 0; \n          \n                  if (highScore > currentHighScore) {\n                    await updateDoc(userRef, {\n                        //Update highscore if new one is higher\n                        highscore: highScore, \n                    });\n          \n                    console.log(\"New high score saved!\");\n                  } else {\n                    console.log(\"High score is not higher, not updating.\");\n                  }\n                } else {\n                  console.log(\"No user data found, creating document.\");\n                  await setDoc(userRef, {\n                    highscore: highScore,\n                  });\n                }\n              } catch (error) {\n                console.error(\"Error saving high score:\", error);\n              }\n            } else {\n              console.log(\"No user is logged in\");\n            }\n          };\n\n        /**\n         * Check if game is won\n         */\n        const checkGameStatus = () => {\n            // For random mode\n            if (!isAdventureMode) {\n                if (pegs.current.every(peg => peg.hit)) {\n                    // Add 500 points for every shot not used\n                    setGameMessage(\"You Win! Score: \" + (currentScore + (shotsLeft * 500)));\n                    setIsGameDone(1);\n                } else if (shotsLeft <= 0) {\n                    setGameMessage(\"You Lose!\");\n                    setIsGameDone(1);\n                }\n            } \n            // Condition if game is in adventure mode\n            else {\n                if (pegs.current.filter(peg => peg.type === \"red\").every(peg => peg.hit)) {\n                    // Add 500 points for every shot not used\n                    setGameMessage(\"You Win! Score: \" + (currentScore + (shotsLeft * 500)));\n                    // Change the current adventure mode level\n                    setCurrentAdventureModeLevel(prev => prev + 1);\n                    saveHighScore(currentScore);\n                    changeAdventureModeLevel();\n                } else if (shotsLeft <= 0) {\n                    setGameMessage(\"You Lose!\");\n                    setIsGameDone(1);\n                    setCurrentAdventureModeLevel(1);\n                }\n            }\n\n        };\n\n\n        /**\n         * Draw all of the elements on the canvas\n         */\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft, currentScore]);\n\n    const launchBall = () => {\n        // Ball will not launch is over or if there's no shots left\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            // Reset pegs hit\n            setPegsHitThisShot(0);\n            // Update shot count\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n    /**\n     * Method that will move the cannon with the mouse position\n     */\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n\n    /**\n     * Reset the game randomly when not in adventure mode\n     */\n    const resetgameRandom = () => {\n        // Reset ball state\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        // Reset pegs\n        const pegGeneration = Math.floor(Math.random() * 5);\n        let pegGenShape;\n        switch (pegGeneration) {\n            case 0: pegGenShape = pegUtils.generatePegsRandomly(); break;\n            case 1: pegGenShape = pegUtils.generatePegsCircular(); break;\n            case 2: pegGenShape = pegUtils.generatePegsHexagonal(); break;\n            case 3: pegGenShape = pegUtils.generatePegsTriangular(); break;\n            case 4: pegGenShape = pegUtils.generatePegsGrid(); break;\n            default: pegGenShape = pegUtils.generatePegsRandomly();\n        }\n        pegs.current = pegGenShape;\n        // Reset game state\n        setIsGameDone(0);\n        setIsAdventureMode(0);\n        setShotsLeft(MAX_SHOTS);\n        setCurrentScore(0);\n        setGameMessage(\"\");\n    };\n\n\n    /**\n     * Start the adventure mode\n     */\n    const startAdventureMode = () => {\n        // Reset ball automatically\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        setIsGameDone(0);\n        // Update adventure mode variables\n        setIsAdventureMode(1);\n        setCurrentAdventureModeLevel(1);\n        // Reset everything\n        setShotsLeft(MAX_SHOTS);\n        setCurrentScore(0);\n        setGameMessage(\"\");\n\n        // Start with level 1\n        pegs.current = adventureLevels.LevelOne();\n    }\n\n    const changeAdventureModeLevel = () => {\n        // Reset ball state\n        ballRef.current = {\n            x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n        };\n\n        if (currentAdventureModeLevel < 5){\n            // Change peg layout based on the new level\n            let newPegLayout;\n            switch (currentAdventureModeLevel + 1) {\n                case 2: newPegLayout = adventureLevels.LevelTwo(); break;\n                case 3: newPegLayout = adventureLevels.LevelThree(); break;\n                case 4: newPegLayout = adventureLevels.LevelFour(); break;\n                case 5: newPegLayout = adventureLevels.LevelFive(); break;\n                default: newPegLayout = adventureLevels.LevelOne();\n            }\n            // Update the pegs\n            pegs.current = newPegLayout; \n\n            // Reset game state\n        setShotsLeft(MAX_SHOTS);\n        setGameMessage(\"\");\n        }else{\n            setGameMessage(\"You Win! Score: \" + (currentScore + (shotsLeft * 500)));\n            setIsAdventureMode(0);\n            setIsGameDone(1);\n        }\n        \n\n    };\n\n\n    /**\n     * Return the game elements\n     */\n    return (\n        <div style={{textAlign: \"center\"}}>\n            {isAdventureMode === 1 && <h2 id=\"gameMessage\">Adventure Mode Level {currentAdventureModeLevel}</h2>}\n\n            {isGameDone === 0 && <p id=\"shotsLeft\">Shots Left: {shotsLeft}</p>}\n\n            {gameMessage && <h2 id=\"gameMessage\">{gameMessage}</h2>}\n\n            <canvas\n                ref={canvasRef}\n                width={CANVAS_WIDTH}\n                height={CANVAS_HEIGHT}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n\n            {isGameDone === 0 && <p id=\"score\">{currentScore}</p>}\n\n            <button id=\"adventureModeButton\" \n            onClick={() => {\n                startAdventureMode();\n                window.location.reload();\n            }}\n            style={{ marginTop: \"10px\", padding: \"10px\", fontSize: \"16px\" }}>\n                Start Adventure Mode!\n            </button>\n\n            <button id=\"newGameButtonRandom\" \n                onClick={() => {\n                    resetgameRandom();\n                    window.location.reload();\n                  }}\n                style={{ marginTop: \"10px\", padding: \"10px\", fontSize: \"16px\" }}>\n                Start a random new game!\n            </button>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js\",\n  _s = $RefreshSig$();\n/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PiggleGame() {\n  _s();\n  // Reference to canvas element\n  const canvasRef = useRef(null);\n\n  // Constants for game mechanics gravity and max shots\n  const BALL_GRAVITY = 0.03;\n  const MAX_SHOTS = 10;\n  const NUMBER_OF_PEGS = 20;\n\n  // Ball state variables\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 10,\n    launched: false\n  });\n\n  // State for cannon angle\n  const [cannonAngle, setCannonAngle] = useState(0);\n  // State for remaining shots\n  const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n  const [gameMessage, setGameMessage] = useState(\"\");\n\n  /**\n   * This method will generate the pegs randomly\n   * @returns The pegs generated in a random\n   */\n  const generatePegsRandomly = () => Array.from({\n    length: NUMBER_OF_PEGS\n  }, () => ({\n    x: Math.random() * 380 + 10,\n    y: Math.random() * 300 + 100,\n    radius: 10,\n    hit: false\n  }));\n\n  /**\n   * This method will generate the pegs in a square grid\n   * @returns \n   */\n  const generatePegsGrid = () => {\n    // Rows and column number\n    const rows = 5;\n    const cols = 5;\n    // Peg spacing\n    const spacing = 50;\n    // Starting position for the top left peg\n    const startX = 100;\n    const startY = 100;\n    let pegs = [];\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        pegs.push({\n          x: startX + col * spacing,\n          y: startY + row * spacing,\n          radius: 10,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n  const generatePegsCircular = () => {\n    const centerX = 200;\n    const centerY = 300;\n    const radius = 100;\n    const angleIncrement = 2 * Math.PI / NUMBER_OF_PEGS;\n    let pegs = [];\n    for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n      const angle = angleIncrement * i;\n      pegs.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        radius: 10,\n        hit: false\n      });\n    }\n    return pegs;\n  };\n  const generatePegsHexagonal = () => {\n    let pegs = [];\n    const rows = 4;\n    const cols = 4;\n    const spacing = 60;\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const offsetX = row % 2 === 0 ? 0 : spacing / 2;\n        pegs.push({\n          x: 100 + (col * spacing + offsetX),\n          y: 200 + row * spacing * Math.sqrt(3) / 2,\n          radius: 10,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n  const generatePegsTriangular = () => {\n    let pegs = [];\n    const rows = 5;\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col <= row; col++) {\n        const x = 50 + col * 40;\n        const y = 100 + row * 40;\n        pegs.push({\n          x: x,\n          y: y,\n          radius: 10,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n\n  // Peg generation logic inside useEffect\n  const pegs = useRef([]);\n  useEffect(() => {\n    const pegGeneration = Math.floor(Math.random() * 5); // Correct random generation\n\n    let pegGenShape;\n    switch (pegGeneration) {\n      case 0:\n        pegGenShape = generatePegsRandomly();\n        break;\n      case 1:\n        pegGenShape = generatePegsCircular();\n        break;\n      case 2:\n        pegGenShape = generatePegsHexagonal();\n        break;\n      case 3:\n        pegGenShape = generatePegsTriangular();\n        break;\n      case 4:\n        pegGenShape = generatePegsGrid();\n        break;\n      default:\n        pegGenShape = generatePegsRandomly();\n    }\n    pegs.current = pegGenShape; // Set pegs after generation\n  }, []);\n\n  // Game loop and rendering logic\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n    const drawCannon = () => {\n      ctx.save();\n      ctx.translate(200, 50);\n      ctx.rotate(cannonAngle);\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(-10, -10, 30, 20);\n      ctx.restore();\n    };\n    const drawBall = () => {\n      ctx.beginPath();\n      ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n      ctx.fillStyle = \"purple\";\n      ctx.fill();\n      ctx.closePath();\n    };\n    const drawPegs = () => {\n      if (pegs.current.length > 0) {\n        pegs.current.forEach(peg => {\n          if (!peg.hit) {\n            ctx.beginPath();\n            ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"blue\";\n            ctx.fill();\n            ctx.closePath();\n          }\n        });\n      }\n    };\n    const handleCollisions = () => {\n      pegs.current.forEach(peg => {\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < ballRef.current.radius + peg.radius) {\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n          peg.hit = true;\n        }\n      });\n    };\n    const updateBall = () => {\n      let ball = ballRef.current;\n      if (ball.launched) {\n        ball.dy += BALL_GRAVITY;\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width || ball.y + ball.radius <= 0) {\n          ball.dx *= -1;\n        }\n        if (ball.y + ball.radius > canvas.height) {\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n          checkGameStatus();\n        }\n        handleCollisions();\n      }\n    };\n    const checkGameStatus = () => {\n      if (pegs.current.every(peg => peg.hit)) {\n        setGameMessage(\"You Win!\");\n      } else if (shotsLeft <= 0) {\n        setGameMessage(\"You Lose!\");\n      }\n    };\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle, shotsLeft]);\n  const launchBall = () => {\n    if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n      ballRef.current.dx = Math.cos(cannonAngle) * 3;\n      ballRef.current.dy = Math.sin(cannonAngle) * 2;\n      ballRef.current.launched = true;\n      setShotsLeft(shotsLeft - 1);\n    }\n  };\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Shots Left: \", shotsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: gameMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 400,\n      height: 500,\n      className: \"border\",\n      onClick: launchBall,\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 9\n  }, this);\n}\n_s(PiggleGame, \"c+Z81yVs060YnhP0YUjz5q2m1U4=\");\n_c = PiggleGame;\nvar _c;\n$RefreshReg$(_c, \"PiggleGame\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","PiggleGame","_s","canvasRef","BALL_GRAVITY","MAX_SHOTS","NUMBER_OF_PEGS","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","gameMessage","setGameMessage","generatePegsRandomly","Array","from","length","Math","random","hit","generatePegsGrid","rows","cols","spacing","startX","startY","pegs","row","col","push","generatePegsCircular","centerX","centerY","angleIncrement","PI","i","angle","cos","sin","generatePegsHexagonal","offsetX","sqrt","generatePegsTriangular","pegGeneration","floor","pegGenShape","current","canvas","ctx","getContext","animationFrameId","drawCannon","save","translate","rotate","fillStyle","fillRect","restore","drawBall","beginPath","arc","fill","closePath","drawPegs","forEach","peg","handleCollisions","distance","normalX","normalY","dotProduct","updateBall","ball","width","height","checkGameStatus","every","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onClick","onMouseMove","_c","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n * \n * @author Charlie McLaughlin\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n/**\n * This function is the main game runner for the game\n * @returns The canvas that the game runs in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n\n    // Constants for game mechanics gravity and max shots\n    const BALL_GRAVITY = 0.03;\n    const MAX_SHOTS = 10;\n    const NUMBER_OF_PEGS = 20;\n\n    // Ball state variables\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    const [gameMessage, setGameMessage] = useState(\"\");\n\n    /**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\n    const generatePegsRandomly = () => (\n        Array.from({ length: NUMBER_OF_PEGS }, () => ({\n            x: Math.random() * 380 + 10,\n            y: Math.random() * 300 + 100,\n            radius: 10,\n            hit: false\n        }))\n    );\n\n    /**\n     * This method will generate the pegs in a square grid\n     * @returns \n     */\n    const generatePegsGrid = () => {\n        // Rows and column number\n        const rows = 5;\n        const cols = 5;\n        // Peg spacing\n        const spacing = 50;\n        // Starting position for the top left peg\n        const startX = 100;\n        const startY = 100;\n\n        let pegs = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                pegs.push({\n                    x: startX + col * spacing,\n                    y: startY + row * spacing,\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    const generatePegsCircular = () => {\n        const centerX = 200;\n        const centerY = 300;\n        const radius = 100;\n        const angleIncrement = (2 * Math.PI) / NUMBER_OF_PEGS;\n        let pegs = [];\n\n        for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n            const angle = angleIncrement * i;\n            pegs.push({\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle),\n                radius: 10,\n                hit: false\n            });\n        }\n        return pegs;\n    };\n\n    const generatePegsHexagonal = () => {\n        let pegs = [];\n        const rows = 4;\n        const cols = 4;\n        const spacing = 60;\n\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                const offsetX = (row % 2 === 0) ? 0 : spacing / 2;\n                pegs.push({\n                    x: 100 + (col * spacing + offsetX),\n                    y: 200 + (row * spacing * Math.sqrt(3) / 2),\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    const generatePegsTriangular = () => {\n        let pegs = [];\n        const rows = 5;\n\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col <= row; col++) {\n                const x = 50 + col * 40;\n                const y = 100 + row * 40;\n                pegs.push({\n                    x: x,\n                    y: y,\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    // Peg generation logic inside useEffect\n    const pegs = useRef([]);\n\n    useEffect(() => {\n        const pegGeneration = Math.floor(Math.random() * 5);  // Correct random generation\n\n        let pegGenShape;\n        switch (pegGeneration) {\n            case 0:\n                pegGenShape = generatePegsRandomly();\n                break;\n            case 1:\n                pegGenShape = generatePegsCircular();\n                break;\n            case 2:\n                pegGenShape = generatePegsHexagonal();\n                break;\n            case 3:\n                pegGenShape = generatePegsTriangular();\n                break;\n            case 4:\n                pegGenShape = generatePegsGrid();\n                break;\n            default:\n                pegGenShape = generatePegsRandomly();\n        }\n\n        pegs.current = pegGenShape;  // Set pegs after generation\n    }, []);\n\n    // Game loop and rendering logic\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n\n        const drawCannon = () => {\n            ctx.save();\n            ctx.translate(200, 50);\n            ctx.rotate(cannonAngle);\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(-10, -10, 30, 20);\n            ctx.restore();\n        };\n\n        const drawBall = () => {\n            ctx.beginPath();\n            ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"purple\";\n            ctx.fill();\n            ctx.closePath();\n        };\n\n        const drawPegs = () => {\n            if (pegs.current.length > 0) {\n                pegs.current.forEach(peg => {\n                    if (!peg.hit) {\n                        ctx.beginPath();\n                        ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n                        ctx.fillStyle = \"blue\";\n                        ctx.fill();\n                        ctx.closePath();\n                    }\n                });\n            }\n        };\n\n        const handleCollisions = () => {\n            pegs.current.forEach(peg => {\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n\n                if (distance < ballRef.current.radius + peg.radius) {\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n                    peg.hit = true;\n                }\n            });\n        };\n\n        const updateBall = () => {\n            let ball = ballRef.current;\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width || ball.y + ball.radius <= 0) {\n                    ball.dx *= -1;\n                }\n\n                if (ball.y + ball.radius > canvas.height) {\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                handleCollisions();\n            }\n        };\n\n        const checkGameStatus = () => {\n            if (pegs.current.every(peg => peg.hit)) {\n                setGameMessage(\"You Win!\");\n            } else if (shotsLeft <= 0) {\n                setGameMessage(\"You Lose!\");\n            }\n        };\n\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft]);\n\n    const launchBall = () => {\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            <p>Shots Left: {shotsLeft}</p>\n            {gameMessage && <h2>{gameMessage}</h2>}\n            <canvas\n                ref={canvasRef}\n                width={400}\n                height={500}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\nconst generatePegsRandomly = () => Array.from({\n  length: NUMBER_OF_PEGS\n}, () => ({\n  x: Math.random() * 380 + 10,\n  y: Math.random() * 300 + 100,\n  radius: PEG_RADIUS,\n  hit: false\n}));\n\n/**\n * This method will generate the pegs in a square grid\n * @returns The pegs in a grid\n */\nconst generatePegsGrid = () => {\n  // Rows and column number\n  const rows = 5;\n  const cols = 5;\n  // Peg spacing\n  const spacing = 50;\n  // Starting position for the top left peg\n  const startX = 100;\n  const startY = 170;\n\n  // Generate the pegs\n  let pegs = [];\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      pegs.push({\n        x: startX + col * spacing,\n        y: startY + row * spacing,\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n  }\n  return pegs;\n};\n\n/**\n * Generate pegs in a circular shape\n * @returns The pegs in a circle\n */\nconst generatePegsCircular = () => {\n  const centerX = 200;\n  const centerY = 300;\n  const radius = 100;\n  const angleIncrement = 2 * Math.PI / NUMBER_OF_PEGS;\n  let pegs = [];\n  for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n    const angle = angleIncrement * i;\n    pegs.push({\n      x: centerX + radius * Math.cos(angle),\n      y: centerY + radius * Math.sin(angle),\n      radius: PEG_RADIUS,\n      hit: false\n    });\n  }\n  return pegs;\n};\n\n/**\n * Generate pegs in a hexagonal formation\n * @returns Pegs generated in a hexagon\n */\nconst generatePegsHexagonal = () => {\n  let pegs = [];\n  const rows = 5; // Number of rows\n  const cols = 5; // Number of columns\n  const spacing = 50; // Horizontal spacing between pegs\n  const startX = 100; // Initial X position\n  const startY = 150; // Initial Y position\n  const verticalSpacing = spacing * Math.sqrt(3) / 2; // Correct vertical spacing for hex grid\n\n  for (let row = 0; row < rows; row++) {\n    const rowOffset = row % 2 === 0 ? 0 : spacing / 2;\n    for (let col = 0; col < cols; col++) {\n      pegs.push({\n        x: startX + col * spacing + rowOffset,\n        y: startY + row * verticalSpacing,\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n  }\n  return pegs;\n};\n\n/**\n * Generate the pegs in a triangular shape\n * @returns The pegs in a triangle shape\n */\nconst generatePegsTriangular = () => {\n  // Array for pegs\n  let pegs = [];\n  const numRows = 5;\n  // Start x for first row\n  const xPos = 200;\n  // Start y for first row\n  const yPos = 220;\n  // Peg spacing\n  const pegSpacing = 40;\n  for (let row = 0; row < numRows; row++) {\n    // Center the row by adjusting the starting x position based on the row number\n    const startX = xPos - row * pegSpacing / 2;\n    for (let col = 0; col <= row; col++) {\n      // Calculate the x and y positions for each peg in the current row\n      const x = startX + col * pegSpacing;\n      const y = yPos + row * pegSpacing;\n      pegs.push({\n        x: x,\n        y: y,\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n  }\n  return pegs;\n};","map":{"version":3,"names":["generatePegsRandomly","Array","from","length","NUMBER_OF_PEGS","x","Math","random","y","radius","PEG_RADIUS","hit","generatePegsGrid","rows","cols","spacing","startX","startY","pegs","row","col","push","generatePegsCircular","centerX","centerY","angleIncrement","PI","i","angle","cos","sin","generatePegsHexagonal","verticalSpacing","sqrt","rowOffset","generatePegsTriangular","numRows","xPos","yPos","pegSpacing"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PegUtils.js"],"sourcesContent":["/**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\nconst generatePegsRandomly = () => (\n    Array.from({ length: NUMBER_OF_PEGS }, () => ({\n        x: (Math.random() * 380) + 10,\n        y: (Math.random() * 300) + 100,\n        radius: PEG_RADIUS,\n        hit: false\n    }))\n);\n\n/**\n * This method will generate the pegs in a square grid\n * @returns The pegs in a grid\n */\nconst generatePegsGrid = () => {\n    // Rows and column number\n    const rows = 5;\n    const cols = 5;\n    // Peg spacing\n    const spacing = 50;\n    // Starting position for the top left peg\n    const startX = 100;\n    const startY = 170;\n\n    // Generate the pegs\n    let pegs = [];\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            pegs.push({\n                x: startX + col * spacing,\n                y: startY + row * spacing,\n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n    }\n    return pegs;\n};\n\n/**\n * Generate pegs in a circular shape\n * @returns The pegs in a circle\n */\nconst generatePegsCircular = () => {\n    const centerX = 200;\n    const centerY = 300;\n    const radius = 100;\n    const angleIncrement = (2 * Math.PI) / NUMBER_OF_PEGS;\n    let pegs = [];\n\n    for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n        const angle = angleIncrement * i;\n        pegs.push({\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle),\n            radius: PEG_RADIUS,\n            hit: false\n        });\n    }\n    return pegs;\n};\n\n/**\n * Generate pegs in a hexagonal formation\n * @returns Pegs generated in a hexagon\n */\nconst generatePegsHexagonal = () => {\n    let pegs = [];\n    const rows = 5;  // Number of rows\n    const cols = 5;  // Number of columns\n    const spacing = 50; // Horizontal spacing between pegs\n    const startX = 100; // Initial X position\n    const startY = 150; // Initial Y position\n    const verticalSpacing = spacing * Math.sqrt(3) / 2; // Correct vertical spacing for hex grid\n\n    for (let row = 0; row < rows; row++) {\n        const rowOffset = (row % 2 === 0) ? 0 : spacing / 2;\n\n        for (let col = 0; col < cols; col++) {\n            pegs.push({\n                x: startX + col * spacing + rowOffset, \n                y: startY + row * verticalSpacing, \n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n    }\n\n    return pegs;\n};\n\n\n\n/**\n * Generate the pegs in a triangular shape\n * @returns The pegs in a triangle shape\n */\nconst generatePegsTriangular = () => {\n    // Array for pegs\n    let pegs = [];\n    const numRows = 5;\n    // Start x for first row\n    const xPos = 200;\n    // Start y for first row\n    const yPos = 220;\n    // Peg spacing\n    const pegSpacing = 40;\n\n    for (let row = 0; row < numRows; row++) {\n        // Center the row by adjusting the starting x position based on the row number\n        const startX = xPos - (row * pegSpacing) / 2;\n\n        for (let col = 0; col <= row; col++) {\n            // Calculate the x and y positions for each peg in the current row\n            const x = startX + col * pegSpacing;\n            const y = yPos + row * pegSpacing;\n            pegs.push({\n                x: x,\n                y: y,\n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n    }\n    return pegs;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
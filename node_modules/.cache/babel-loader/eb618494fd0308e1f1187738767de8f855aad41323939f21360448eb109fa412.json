{"ast":null,"code":"var _jsxFileName = \"/Users/charliemclaughlin/Desktop/Programming/JavaScript/Piggle/piggle/src/PiggleGame.js\",\n  _s = $RefreshSig$();\n/**\n * Piggle is a game where you hit pegs with balls\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n/**\n * Main game runner\n * @returns The canvas which the game is run in\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PiggleGame() {\n  _s();\n  // Reference to canvas element\n  const canvasRef = useRef(null);\n\n  // Constants for game mechanics gravity and max shots\n  const BALL_GRAVITY = 0.03;\n  const MAX_SHOTS = 10;\n  const NUMBER_OF_PEGS = 20;\n\n  // Ball state, including position, velocity, and launch status\n  const ballRef = useRef({\n    x: 200,\n    y: 50,\n    dx: 0,\n    dy: 0,\n    radius: 10,\n    launched: false\n  });\n\n  // State for cannon angle\n  const [cannonAngle, setCannonAngle] = useState(0);\n  // State for remaining shots\n  const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n  const [gameMessage, setGameMessage] = useState(\"\");\n\n  // Generate pegs at random positions\n  const generatePegs = () =>\n  // Generate n pegs\n  Array.from({\n    length: NUMBER_OF_PEGS\n  }, () => ({\n    x: Math.random() * 380 + 10,\n    y: Math.random() * 300 + 100,\n    radius: 10,\n    hit: false\n  }));\n\n  // Generate pegs in a square grid\n  const generatePegsUniformly = () => {\n    const rows = 5;\n    const cols = 5;\n    // Horizontal spacing between pegs\n    const spacingX = 60;\n    // Vertical spacing between pegs\n    const spacingY = 60;\n    const startX = 50; // Offset to center pegs\n    const startY = 100;\n    let pegs = [];\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        pegs.push({\n          x: startX + col * spacingX,\n          y: startY + row * spacingY,\n          radius: 10,\n          hit: false\n        });\n      }\n    }\n    return pegs;\n  };\n\n  // Reference to pegs in the game\n  const pegs = useRef(generatePegsUniformly());\n\n  // Game loop and rendering logic\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let animationFrameId;\n\n    // Draw cannon at current angle\n    const drawCannon = () => {\n      ctx.save();\n      ctx.translate(200, 50);\n      ctx.rotate(cannonAngle);\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(-10, -10, 30, 20);\n      ctx.restore();\n    };\n\n    // Draw the ball at its current position\n    const drawBall = () => {\n      ctx.beginPath();\n      ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n      ctx.fillStyle = \"purple\";\n      ctx.fill();\n      ctx.closePath();\n    };\n\n    // Draw pegs, ignoring ones that have been hit\n    const drawPegs = () => {\n      pegs.current.forEach(peg => {\n        if (!peg.hit) {\n          ctx.beginPath();\n          ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n          ctx.fillStyle = \"blue\";\n          ctx.fill();\n          ctx.closePath();\n        }\n      });\n    };\n\n    // Handle ball collision with pegs\n    const handleCollisions = () => {\n      pegs.current.forEach(peg => {\n        if (peg.hit) return;\n        const dx = ballRef.current.x - peg.x;\n        const dy = ballRef.current.y - peg.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < ballRef.current.radius + peg.radius) {\n          const normalX = dx / distance;\n          const normalY = dy / distance;\n          const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n          ballRef.current.dx -= 2 * dotProduct * normalX;\n          ballRef.current.dy -= 2 * dotProduct * normalY;\n          peg.hit = true;\n        }\n      });\n    };\n\n    // Update ball movement with gravity and collision checks\n    const updateBall = () => {\n      let ball = ballRef.current;\n      if (ball.launched) {\n        ball.dy += BALL_GRAVITY;\n        ball.x += ball.dx;\n        ball.y += ball.dy;\n\n        // Bounce off walls\n        if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width || ball.y + ball.radius <= 0) {\n          ball.dx *= -1;\n        }\n        // If the ball hits the ground, reset position and check game status\n        if (ball.y + ball.radius > canvas.height) {\n          ball.launched = false;\n          ball.x = 200;\n          ball.y = 50;\n          ball.dx = 0;\n          ball.dy = 0;\n          checkGameStatus();\n        }\n        handleCollisions();\n      }\n    };\n\n    // Check if the game is won or lost\n    const checkGameStatus = () => {\n      if (pegs.current.every(peg => peg.hit)) {\n        setGameMessage(\"You Win!\");\n      } else if (shotsLeft <= 0) {\n        setGameMessage(\"You Lose!\");\n      }\n    };\n\n    // Main game loop, updates and redraws elements\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawCannon();\n      drawPegs();\n      drawBall();\n      updateBall();\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [cannonAngle, shotsLeft]);\n\n  // Launch the ball when clicking the canvas\n  const launchBall = () => {\n    if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n      ballRef.current.dx = Math.cos(cannonAngle) * 3;\n      ballRef.current.dy = Math.sin(cannonAngle) * 2;\n      ballRef.current.launched = true;\n      setShotsLeft(shotsLeft - 1);\n    }\n  };\n\n  // Adjust cannon angle based on mouse position\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Shots Left: \", shotsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: gameMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 400,\n      height: 500,\n      className: \"border\",\n      onClick: launchBall,\n      onMouseMove: handleMouseMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n}\n_s(PiggleGame, \"fhijtAhPoCK4dJ1RTftK2wZTs2w=\");\n_c = PiggleGame;\nvar _c;\n$RefreshReg$(_c, \"PiggleGame\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","PiggleGame","_s","canvasRef","BALL_GRAVITY","MAX_SHOTS","NUMBER_OF_PEGS","ballRef","x","y","dx","dy","radius","launched","cannonAngle","setCannonAngle","shotsLeft","setShotsLeft","gameMessage","setGameMessage","generatePegs","Array","from","length","Math","random","hit","generatePegsUniformly","rows","cols","spacingX","spacingY","startX","startY","pegs","row","col","push","canvas","current","ctx","getContext","animationFrameId","drawCannon","save","translate","rotate","fillStyle","fillRect","restore","drawBall","beginPath","arc","PI","fill","closePath","drawPegs","forEach","peg","handleCollisions","distance","sqrt","normalX","normalY","dotProduct","updateBall","ball","width","height","checkGameStatus","every","animate","clearRect","requestAnimationFrame","cancelAnimationFrame","launchBall","cos","sin","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","atan2","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onClick","onMouseMove","_c","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/JavaScript/Piggle/piggle/src/PiggleGame.js"],"sourcesContent":["/**\n * Piggle is a game where you hit pegs with balls\n */\nimport { useEffect, useRef, useState } from \"react\";\n\n/**\n * Main game runner\n * @returns The canvas which the game is run in\n */\nexport default function PiggleGame() {\n    // Reference to canvas element\n    const canvasRef = useRef(null);\n\n    // Constants for game mechanics gravity and max shots\n    const BALL_GRAVITY = 0.03;\n    const MAX_SHOTS = 10;\n    const NUMBER_OF_PEGS = 20;\n\n    // Ball state, including position, velocity, and launch status\n    const ballRef = useRef({\n        x: 200, y: 50, dx: 0, dy: 0, radius: 10, launched: false\n    });\n\n    // State for cannon angle\n    const [cannonAngle, setCannonAngle] = useState(0);\n    // State for remaining shots\n    const [shotsLeft, setShotsLeft] = useState(MAX_SHOTS);\n    const [gameMessage, setGameMessage] = useState(\"\");\n\n    // Generate pegs at random positions\n    const generatePegs = () => (\n        // Generate n pegs\n        Array.from({length: NUMBER_OF_PEGS}, () => ({\n            x: Math.random() * 380 + 10,\n            y: Math.random() * 300 + 100,\n            radius: 10,\n            hit: false\n        }))\n    );\n\n    // Generate pegs in a square grid\n    const generatePegsUniformly = () => {\n        const rows = 5;\n        const cols = 5;\n        // Horizontal spacing between pegs\n        const spacingX = 60; \n        // Vertical spacing between pegs\n        const spacingY = 60; \n        const startX = 50;  // Offset to center pegs\n        const startY = 100;\n    \n        let pegs = [];\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                pegs.push({\n                    x: startX + col * spacingX,\n                    y: startY + row * spacingY,\n                    radius: 10,\n                    hit: false\n                });\n            }\n        }\n        return pegs;\n    };\n\n    // Reference to pegs in the game\n    const pegs = useRef(generatePegsUniformly());\n\n    // Game loop and rendering logic\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        let animationFrameId;\n\n        // Draw cannon at current angle\n        const drawCannon = () => {\n            ctx.save();\n            ctx.translate(200, 50);\n            ctx.rotate(cannonAngle);\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(-10, -10, 30, 20);\n            ctx.restore();\n        };\n\n        // Draw the ball at its current position\n        const drawBall = () => {\n            ctx.beginPath();\n            ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"purple\";\n            ctx.fill();\n            ctx.closePath();\n        };\n\n        // Draw pegs, ignoring ones that have been hit\n        const drawPegs = () => {\n            pegs.current.forEach(peg => {\n                if (!peg.hit) {\n                    ctx.beginPath();\n                    ctx.arc(peg.x, peg.y, peg.radius, 0, Math.PI * 2);\n                    ctx.fillStyle = \"blue\";\n                    ctx.fill();\n                    ctx.closePath();\n                }\n            });\n        };\n\n        // Handle ball collision with pegs\n        const handleCollisions = () => {\n            pegs.current.forEach(peg => {\n                if (peg.hit) return;\n                const dx = ballRef.current.x - peg.x;\n                const dy = ballRef.current.y - peg.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n\n                if (distance < ballRef.current.radius + peg.radius) {\n                    const normalX = dx / distance;\n                    const normalY = dy / distance;\n                    const dotProduct = ballRef.current.dx * normalX + ballRef.current.dy * normalY;\n                    ballRef.current.dx -= 2 * dotProduct * normalX;\n                    ballRef.current.dy -= 2 * dotProduct * normalY;\n                    peg.hit = true;\n                }\n            });\n        };\n\n        // Update ball movement with gravity and collision checks\n        const updateBall = () => {\n            let ball = ballRef.current;\n            if (ball.launched) {\n                ball.dy += BALL_GRAVITY;\n                ball.x += ball.dx;\n                ball.y += ball.dy;\n\n                // Bounce off walls\n                if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width || ball.y + ball.radius <= 0) {\n                    ball.dx *= -1;\n                }\n                // If the ball hits the ground, reset position and check game status\n                if (ball.y + ball.radius > canvas.height) {\n                    ball.launched = false;\n                    ball.x = 200;\n                    ball.y = 50;\n                    ball.dx = 0;\n                    ball.dy = 0;\n                    checkGameStatus();\n                }\n                handleCollisions();\n            }\n        };\n\n        // Check if the game is won or lost\n        const checkGameStatus = () => {\n            if (pegs.current.every(peg => peg.hit)) {\n                setGameMessage(\"You Win!\");\n            } else if (shotsLeft <= 0) {\n                setGameMessage(\"You Lose!\");\n            }\n        };\n\n        // Main game loop, updates and redraws elements\n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawCannon();\n            drawPegs();\n            drawBall();\n            updateBall();\n            animationFrameId = requestAnimationFrame(animate);\n        };\n\n        animate();\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [cannonAngle, shotsLeft]);\n\n    // Launch the ball when clicking the canvas\n    const launchBall = () => {\n        if (!ballRef.current.launched && shotsLeft > 0 && gameMessage === \"\") {\n            ballRef.current.dx = Math.cos(cannonAngle) * 3;\n            ballRef.current.dy = Math.sin(cannonAngle) * 2;\n            ballRef.current.launched = true;\n            setShotsLeft(shotsLeft - 1);\n        }\n    };\n\n    // Adjust cannon angle based on mouse position\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n        setCannonAngle(Math.atan2(mouseY - 50, mouseX - 200));\n    };\n\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            {/* Display shots left */}\n            <p>Shots Left: {shotsLeft}</p>\n            {/* Show win/lose message if applicable */}\n            {gameMessage && <h2>{gameMessage}</h2>}\n            <canvas\n                ref={canvasRef}\n                width={400}\n                height={500}\n                className=\"border\"\n                onClick={launchBall}\n                onMouseMove={handleMouseMove}\n            />\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export { generatePegsRandomly, generatePegsGrid, generatePegsCircular, generatePegsHexagonal, generatePegsTriangular };\nconst NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n/**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\nconst generatePegsRandomly = () => Array.from({\n  length: NUMBER_OF_PEGS\n}, () => ({\n  x: Math.random() * 380 + 10,\n  y: Math.random() * 300 + 100,\n  radius: PEG_RADIUS,\n  hit: false\n}));\n\n/**\n * This method will generate the pegs in a square grid\n * @returns The pegs in a grid\n */\nconst generatePegsGrid = () => {\n  // Rows and column number\n  const rows = 5;\n  const cols = 5;\n  // Peg spacing\n  const spacing = 50;\n  // Starting position for the top left peg\n  const startX = 100;\n  const startY = 170;\n\n  // Generate the pegs\n  let pegs = [];\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      pegs.push({\n        x: startX + col * spacing,\n        y: startY + row * spacing,\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n  }\n  return pegs;\n};\n\n/**\n * Generate pegs in a circular shape\n * @returns The pegs in a circle\n */\nconst generatePegsCircular = () => {\n  const centerX = 200;\n  const centerY = 300;\n  const radius = 100;\n  const angleIncrement = 2 * Math.PI / NUMBER_OF_PEGS;\n  let pegs = [];\n  for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n    const angle = angleIncrement * i;\n    pegs.push({\n      x: centerX + radius * Math.cos(angle),\n      y: centerY + radius * Math.sin(angle),\n      radius: PEG_RADIUS,\n      hit: false\n    });\n  }\n  return pegs;\n};\n\n/**\n * Generate pegs in a hexagonal formation\n * @returns Pegs generated in a hexagon\n */\nconst generatePegsHexagonal = () => {\n  let pegs = [];\n  const rows = 5; // Number of rows\n  const cols = 5; // Number of columns\n  const spacing = 50; // Horizontal spacing between pegs\n  const startX = 100; // Initial X position\n  const startY = 150; // Initial Y position\n  const verticalSpacing = spacing * Math.sqrt(3) / 2; // Correct vertical spacing for hex grid\n\n  for (let row = 0; row < rows; row++) {\n    const rowOffset = row % 2 === 0 ? 0 : spacing / 2;\n    for (let col = 0; col < cols; col++) {\n      pegs.push({\n        x: startX + col * spacing + rowOffset,\n        y: startY + row * verticalSpacing,\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n  }\n  return pegs;\n};\n\n/**\n * Generate the pegs in a triangular shape\n * @returns The pegs in a triangle shape\n */\nconst generatePegsTriangular = () => {\n  // Array for pegs\n  let pegs = [];\n  const numRows = 5;\n  // Start x for first row\n  const xPos = 200;\n  // Start y for first row\n  const yPos = 220;\n  // Peg spacing\n  const pegSpacing = 40;\n  for (let row = 0; row < numRows; row++) {\n    // Center the row by adjusting the starting x position based on the row number\n    const startX = xPos - row * pegSpacing / 2;\n    for (let col = 0; col <= row; col++) {\n      // Calculate the x and y positions for each peg in the current row\n      const x = startX + col * pegSpacing;\n      const y = yPos + row * pegSpacing;\n      pegs.push({\n        x: x,\n        y: y,\n        radius: PEG_RADIUS,\n        hit: false\n      });\n    }\n  }\n  return pegs;\n};","map":{"version":3,"names":["generatePegsRandomly","generatePegsGrid","generatePegsCircular","generatePegsHexagonal","generatePegsTriangular","NUMBER_OF_PEGS","PEG_RADIUS","Array","from","length","x","Math","random","y","radius","hit","rows","cols","spacing","startX","startY","pegs","row","col","push","centerX","centerY","angleIncrement","PI","i","angle","cos","sin","verticalSpacing","sqrt","rowOffset","numRows","xPos","yPos","pegSpacing"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/PegUtils.js"],"sourcesContent":["export { \n    generatePegsRandomly, \n    generatePegsGrid, \n    generatePegsCircular, \n    generatePegsHexagonal, \n    generatePegsTriangular \n};\n\nconst NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n/**\n     * This method will generate the pegs randomly\n     * @returns The pegs generated in a random\n     */\nconst generatePegsRandomly = () => (\n    Array.from({ length: NUMBER_OF_PEGS }, () => ({\n        x: (Math.random() * 380) + 10,\n        y: (Math.random() * 300) + 100,\n        radius: PEG_RADIUS,\n        hit: false\n    }))\n);\n\n/**\n * This method will generate the pegs in a square grid\n * @returns The pegs in a grid\n */\nconst generatePegsGrid = () => {\n    // Rows and column number\n    const rows = 5;\n    const cols = 5;\n    // Peg spacing\n    const spacing = 50;\n    // Starting position for the top left peg\n    const startX = 100;\n    const startY = 170;\n\n    // Generate the pegs\n    let pegs = [];\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            pegs.push({\n                x: startX + col * spacing,\n                y: startY + row * spacing,\n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n    }\n    return pegs;\n};\n\n/**\n * Generate pegs in a circular shape\n * @returns The pegs in a circle\n */\nconst generatePegsCircular = () => {\n    const centerX = 200;\n    const centerY = 300;\n    const radius = 100;\n    const angleIncrement = (2 * Math.PI) / NUMBER_OF_PEGS;\n    let pegs = [];\n\n    for (let i = 0; i < NUMBER_OF_PEGS; i++) {\n        const angle = angleIncrement * i;\n        pegs.push({\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle),\n            radius: PEG_RADIUS,\n            hit: false\n        });\n    }\n    return pegs;\n};\n\n/**\n * Generate pegs in a hexagonal formation\n * @returns Pegs generated in a hexagon\n */\nconst generatePegsHexagonal = () => {\n    let pegs = [];\n    const rows = 5;  // Number of rows\n    const cols = 5;  // Number of columns\n    const spacing = 50; // Horizontal spacing between pegs\n    const startX = 100; // Initial X position\n    const startY = 150; // Initial Y position\n    const verticalSpacing = spacing * Math.sqrt(3) / 2; // Correct vertical spacing for hex grid\n\n    for (let row = 0; row < rows; row++) {\n        const rowOffset = (row % 2 === 0) ? 0 : spacing / 2;\n\n        for (let col = 0; col < cols; col++) {\n            pegs.push({\n                x: startX + col * spacing + rowOffset, \n                y: startY + row * verticalSpacing, \n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n    }\n\n    return pegs;\n};\n\n\n\n/**\n * Generate the pegs in a triangular shape\n * @returns The pegs in a triangle shape\n */\nconst generatePegsTriangular = () => {\n    // Array for pegs\n    let pegs = [];\n    const numRows = 5;\n    // Start x for first row\n    const xPos = 200;\n    // Start y for first row\n    const yPos = 220;\n    // Peg spacing\n    const pegSpacing = 40;\n\n    for (let row = 0; row < numRows; row++) {\n        // Center the row by adjusting the starting x position based on the row number\n        const startX = xPos - (row * pegSpacing) / 2;\n\n        for (let col = 0; col <= row; col++) {\n            // Calculate the x and y positions for each peg in the current row\n            const x = startX + col * pegSpacing;\n            const y = yPos + row * pegSpacing;\n            pegs.push({\n                x: x,\n                y: y,\n                radius: PEG_RADIUS,\n                hit: false\n            });\n        }\n    }\n    return pegs;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
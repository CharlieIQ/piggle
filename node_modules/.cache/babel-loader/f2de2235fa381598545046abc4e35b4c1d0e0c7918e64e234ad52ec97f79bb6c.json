{"ast":null,"code":"let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n\n/**\n * This method will generate level 1\n */\nconst LevelOne = () => {\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const rows = 5;\n  const cols = 5;\n  const spacing = 50;\n  const startX = 100;\n  const startY = 170;\n  let pegs = [];\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      let pegType = \"blue\";\n\n      // Ensure red pegs don't exceed blue pegs\n      if (Math.random() < 0.3 && redPegCount < bluePegCount / 2) {\n        pegType = \"red\";\n        redPegCount++;\n      }\n      bluePegCount++; // Increment blue peg count regardless\n\n      pegs.push({\n        x: startX + col * spacing,\n        y: startY + row * spacing,\n        radius: typeof PEG_RADIUS !== \"undefined\" ? PEG_RADIUS : 10,\n        // Default radius if undefined\n        hit: false,\n        type: pegType\n      });\n    }\n  }\n  return pegs;\n};\n\n/**\n * This method will generate level 2\n */\n_c = LevelOne;\nconst LevelTwo = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const totalPegs = NUMBER_OF_PEGS;\n  for (let i = 0; i < totalPegs; i++) {\n    let pegType = \"blue\";\n\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    pegs.push({\n      x: Math.random() * 380 + 10,\n      y: Math.random() * 300 + 100,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  ;\n  return pegs;\n};\n\n/**\n * This method will generate level 3\n */\n_c2 = LevelTwo;\nconst LevelThree = () => {\n  let pegs = [];\n  let redPegCount = 0;\n  let bluePegCount = 0;\n  const totalPegs = NUMBER_OF_PEGS;\n  for (let i = 0; i < totalPegs; i++) {\n    let pegType = \"blue\";\n\n    // Ensure red pegs don't exceed blue pegs\n    if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n      pegType = \"red\";\n      redPegCount++;\n    } else {\n      bluePegCount++;\n    }\n    pegs.push({\n      x: 50 + (15 * i + i % 10),\n      y: 200 + 15 * i + i % 10,\n      radius: PEG_RADIUS,\n      hit: false,\n      type: pegType\n    });\n  }\n  ;\n  return pegs;\n};\n_c3 = LevelThree;\nexport { LevelOne, LevelTwo, LevelThree };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LevelOne\");\n$RefreshReg$(_c2, \"LevelTwo\");\n$RefreshReg$(_c3, \"LevelThree\");","map":{"version":3,"names":["NUMBER_OF_PEGS","PEG_RADIUS","LevelOne","redPegCount","bluePegCount","rows","cols","spacing","startX","startY","pegs","row","col","pegType","Math","random","push","x","y","radius","hit","type","_c","LevelTwo","totalPegs","i","_c2","LevelThree","_c3","$RefreshReg$"],"sources":["/Users/charliemclaughlin/Desktop/Programming/GitHub/piggle/src/Levels.js"],"sourcesContent":["let NUMBER_OF_PEGS = 20;\nconst PEG_RADIUS = 10;\n\n/**\n * This method will generate level 1\n */\nconst LevelOne = () => {\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    \n    const rows = 5;\n    const cols = 5;\n    const spacing = 50;\n    const startX = 100;\n    const startY = 170;\n\n    let pegs = [];\n\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            let pegType = \"blue\";\n\n            // Ensure red pegs don't exceed blue pegs\n            if (Math.random() < 0.3 && redPegCount < (bluePegCount / 2)) {\n                pegType = \"red\";\n                redPegCount++;\n            }\n            bluePegCount++; // Increment blue peg count regardless\n\n            pegs.push({\n                x: startX + col * spacing,\n                y: startY + row * spacing,\n                radius: typeof PEG_RADIUS !== \"undefined\" ? PEG_RADIUS : 10, // Default radius if undefined\n                hit: false,\n                type: pegType\n            });\n        }\n    }\n\n    return pegs;\n};\n\n\n/**\n * This method will generate level 2\n */\nconst LevelTwo = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: (Math.random() * 380) + 10,\n            y: (Math.random() * 300) + 100,\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n\n/**\n * This method will generate level 3\n */\nconst LevelThree = () => {\n    let pegs = [];\n    let redPegCount = 0;\n    let bluePegCount = 0;\n    const totalPegs = NUMBER_OF_PEGS;\n\n    for (let i = 0; i < totalPegs; i++) {\n        let pegType = \"blue\";\n\n        // Ensure red pegs don't exceed blue pegs\n        if (Math.random() < 0.3 && redPegCount < bluePegCount) {\n            pegType = \"red\";\n            redPegCount++;\n        } else {\n            bluePegCount++;\n        }\n\n        pegs.push({\n            x: 50 + (15*i + (i %10)),\n            y: 200 + (15*i) + (i % 10),\n            radius: PEG_RADIUS,\n            hit: false,\n            type: pegType\n        });\n    };\n\n    return pegs;\n}\n\n\nexport { \n    LevelOne,\n    LevelTwo,\n    LevelThree\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}